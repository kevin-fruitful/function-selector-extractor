{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "addSupportedExternalToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_objectId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_contextId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_role",
          "type": "string"
        }
      ],
      "name": "assignRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateTradingCommissions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "roughCommissionPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionNaymsLtd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionNDF",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionSTM",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionMaker",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCommissions",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCommissions",
          "name": "tc",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_assignerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_objectId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_contextId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_role",
          "type": "string"
        }
      ],
      "name": "canAssign",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "group",
          "type": "string"
        }
      ],
      "name": "canGroupAssignRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offerId",
          "type": "uint256"
        }
      ],
      "name": "cancelOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_policyId",
          "type": "bytes32"
        }
      ],
      "name": "cancelSimplePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "cancelUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "checkAndUpdateSimplePolicyState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_entityAdmin",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "assetId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "utilizedCapacity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "simplePolicyEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct Entity",
          "name": "_entityData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_dataHash",
          "type": "bytes32"
        }
      ],
      "name": "createEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_policyId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "roles",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "entityIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "signatures",
              "type": "bytes[]"
            }
          ],
          "internalType": "struct Stakeholders",
          "name": "_stakeholders",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturationDate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "fundsLocked",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "cancelled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "claimsPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumsPaid",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commissionReceivers",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256[]",
              "name": "commissionBasisPoints",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct SimplePolicy",
          "name": "_simplePolicy",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_dataHash",
          "type": "bytes32"
        }
      ],
      "name": "createSimplePolicy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "createUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domainSeparatorV4",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "enableEntityTokenization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sellToken",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_buyToken",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_buyAmount",
          "type": "uint256"
        }
      ],
      "name": "executeLimitOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyTokenCommissionsPaid_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellTokenCommissionsPaid_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_externalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "externalDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_receiverId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_externalTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "externalWithdrawFromEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "facetFunctionSelectors_",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_externalTokenId",
          "type": "bytes32"
        }
      ],
      "name": "getAddressFromExternalTokenId",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sellToken",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_buyToken",
          "type": "bytes32"
        }
      ],
      "name": "getBestOfferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_userId",
          "type": "bytes32"
        }
      ],
      "name": "getEntity",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "entityId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        }
      ],
      "name": "getEntityInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "assetId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "utilizedCapacity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "simplePolicyEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct Entity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastOfferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_tokenId",
          "type": "bytes32"
        }
      ],
      "name": "getLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDividendDenominations",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getObjectMeta",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "parent",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "tokenWrapper",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offerId",
          "type": "uint256"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "creator",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "sellToken",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellAmountInitial",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "buyToken",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmountInitial",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeSchedule",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "state",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rankNext",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rankPrev",
              "type": "uint256"
            }
          ],
          "internalType": "struct MarketInfo",
          "name": "_offerState",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPremiumCommissionBasisPoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "premiumCommissionNaymsLtdBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumCommissionNDFBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumCommissionSTMBP",
              "type": "uint16"
            }
          ],
          "internalType": "struct PolicyCommissionsBasisPoints",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "objectId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "contextId",
          "type": "bytes32"
        }
      ],
      "name": "getRoleInContext",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturationDate",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_offchainDataHash",
          "type": "bytes32"
        }
      ],
      "name": "getSigningHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "signingHash_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "getSimplePolicyInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturationDate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "limit",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "fundsLocked",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "cancelled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "claimsPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "premiumsPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct SimplePolicyInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedExternalTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSystemId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTradingCommissionsBasisPoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "tradingCommissionTotalBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionNaymsLtdBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionNDFBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionSTMBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionMakerBP",
              "type": "uint16"
            }
          ],
          "internalType": "struct TradingCommissionsBasisPoints",
          "name": "bp",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getUpgrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpgradeExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "upgradeExpiration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getUserIdFromAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "userId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_tokenId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_dividendTokenId",
          "type": "bytes32"
        }
      ],
      "name": "getWithdrawableDividend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_entityPayout",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "structHash",
          "type": "bytes32"
        }
      ],
      "name": "hashTypedDataV4",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "accountId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "internalBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "from",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "internalBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "internalTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "internalTransferFromEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offerId",
          "type": "uint256"
        }
      ],
      "name": "isActiveOffer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDiamondInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "isFunctionLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_objectId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_contextId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_group",
          "type": "string"
        }
      ],
      "name": "isInGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_id",
          "type": "bytes32"
        }
      ],
      "name": "isObject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_objectId",
          "type": "bytes32"
        }
      ],
      "name": "isObjectTokenizable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_objectId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_contextId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_group",
          "type": "string"
        }
      ],
      "name": "isParentInGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "group",
          "type": "string"
        }
      ],
      "name": "isRoleInGroup",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tokenId",
          "type": "bytes32"
        }
      ],
      "name": "isSupportedExternalToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        }
      ],
      "name": "isTokenWrapped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockAllFundTransferFunctions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "lockFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payDividendFromEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_policyId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_insuredId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "paySimpleClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_policyId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "paySimplePremium",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_userId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        }
      ],
      "name": "setEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_newMax",
          "type": "uint8"
        }
      ],
      "name": "setMaxDividendDenominations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "premiumCommissionNaymsLtdBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumCommissionNDFBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "premiumCommissionSTMBP",
              "type": "uint16"
            }
          ],
          "internalType": "struct PolicyCommissionsBasisPoints",
          "name": "_policyCommissions",
          "type": "tuple"
        }
      ],
      "name": "setPolicyCommissionsBasisPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "tradingCommissionTotalBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionNaymsLtdBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionNDFBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionSTMBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionMakerBP",
              "type": "uint16"
            }
          ],
          "internalType": "struct TradingCommissionsBasisPoints",
          "name": "_tradingCommissions",
          "type": "tuple"
        }
      ],
      "name": "setTradingCommissionsBasisPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalPrice",
          "type": "uint256"
        }
      ],
      "name": "startTokenSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_strIn",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_objectId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_contextId",
          "type": "bytes32"
        }
      ],
      "name": "unassignRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "unlockFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_entityId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "assetId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCapacity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "utilizedCapacity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "simplePolicyEnabled",
              "type": "bool"
            }
          ],
          "internalType": "struct Entity",
          "name": "_entity",
          "type": "tuple"
        }
      ],
      "name": "updateEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_role",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_assignerGroup",
          "type": "string"
        }
      ],
      "name": "updateRoleAssigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_role",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_group",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_roleInGroup",
          "type": "bool"
        }
      ],
      "name": "updateRoleGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "updateUpgradeExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ownerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "withdrawAllDividends",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ownerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dividendTokenId",
          "type": "bytes32"
        }
      ],
      "name": "withdrawDividend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_objectId",
          "type": "bytes32"
        }
      ],
      "name": "wrapToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "from",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "to",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "wrapperInternalTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addSupportedExternalToken(address)": "cb429501",
    "assignRole(bytes32,bytes32,string)": "5e1ac8fa",
    "balanceOf(address)": "70a08231",
    "calculateTradingCommissions(uint256)": "eb3f5926",
    "canAssign(bytes32,bytes32,bytes32,string)": "1219dee2",
    "canGroupAssignRole(string,string)": "af76f046",
    "cancelOffer(uint256)": "ef706adf",
    "cancelSimplePolicy(bytes32)": "23eaabe3",
    "cancelUpgrade(bytes32)": "337781ea",
    "checkAndUpdateSimplePolicyState(bytes32)": "00bae173",
    "createEntity(bytes32,bytes32,(bytes32,uint256,uint256,uint256,bool),bytes32)": "53733f97",
    "createSimplePolicy(bytes32,bytes32,(bytes32[],bytes32[],bytes[]),(uint256,uint256,bytes32,uint256,bool,bool,uint256,uint256,bytes32[],uint256[]),bytes32)": "04e2e500",
    "createUpgrade(bytes32)": "1d510217",
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": "1f931c1c",
    "domainSeparatorV4()": "78e890ba",
    "enableEntityTokenization(bytes32,string,string)": "f17d17f4",
    "executeLimitOffer(bytes32,uint256,bytes32,uint256)": "9df00480",
    "externalDeposit(address,uint256)": "9bda8678",
    "externalWithdrawFromEntity(bytes32,address,address,uint256)": "13b74760",
    "facetAddress(bytes4)": "cdffacc6",
    "facetAddresses()": "52ef6b2c",
    "facetFunctionSelectors(address)": "adfca15e",
    "facets()": "7a0ed627",
    "getAddressFromExternalTokenId(bytes32)": "3f1b887f",
    "getBestOfferId(bytes32,bytes32)": "4c8198dc",
    "getEntity(bytes32)": "53b66f36",
    "getEntityInfo(bytes32)": "edd2133b",
    "getLastOfferId()": "59e148fc",
    "getLockedBalance(bytes32,bytes32)": "7baa1dde",
    "getMaxDividendDenominations()": "e9f0273c",
    "getObjectMeta(bytes32)": "cf0ccf9e",
    "getOffer(uint256)": "4579268a",
    "getPremiumCommissionBasisPoints()": "3a0b7208",
    "getRoleInContext(bytes32,bytes32)": "47c07483",
    "getSigningHash(uint256,uint256,bytes32,uint256,bytes32)": "f3253b5f",
    "getSimplePolicyInfo(bytes32)": "c3ab48cb",
    "getSupportedExternalTokens()": "bdd2620a",
    "getSystemId()": "eb75c8e8",
    "getTradingCommissionsBasisPoints()": "ed7364ae",
    "getUpgrade(bytes32)": "22f153db",
    "getUpgradeExpiration()": "e13b9b14",
    "getUserIdFromAddress(address)": "9cb481b2",
    "getWithdrawableDividend(bytes32,bytes32,bytes32)": "d588b132",
    "hashTypedDataV4(bytes32)": "4980f288",
    "internalBalanceOf(bytes32,bytes32)": "5c923301",
    "internalBurn(bytes32,bytes32,uint256)": "c9787589",
    "internalTokenSupply(bytes32)": "e208f10a",
    "internalTransferFromEntity(bytes32,bytes32,uint256)": "a6cd857d",
    "isActiveOffer(uint256)": "8d81a1d3",
    "isDiamondInitialized()": "10a2bbed",
    "isFunctionLocked(bytes4)": "e6a19df2",
    "isInGroup(bytes32,bytes32,string)": "d774b4e3",
    "isObject(bytes32)": "524d8dd5",
    "isObjectTokenizable(bytes32)": "a62caf82",
    "isParentInGroup(bytes32,bytes32,string)": "c8422402",
    "isRoleInGroup(string,string)": "7273e796",
    "isSupportedExternalToken(bytes32)": "a0069289",
    "isTokenWrapped(bytes32)": "10b4955d",
    "lockAllFundTransferFunctions()": "a246e7a8",
    "lockFunction(bytes4)": "34531828",
    "owner()": "8da5cb5b",
    "payDividendFromEntity(bytes32,uint256)": "aa47d5cb",
    "paySimpleClaim(bytes32,bytes32,bytes32,uint256)": "e8b3fb3c",
    "paySimplePremium(bytes32,uint256)": "7d292605",
    "setEntity(bytes32,bytes32)": "afab5f15",
    "setMaxDividendDenominations(uint8)": "5c74d6a4",
    "setPolicyCommissionsBasisPoints((uint16,uint16,uint16))": "d57af28f",
    "setTradingCommissionsBasisPoints((uint16,uint16,uint16,uint16,uint16))": "08a111ae",
    "startTokenSale(bytes32,uint256,uint256)": "a2e4569b",
    "stringToBytes32(string)": "cfb51928",
    "supportsInterface(bytes4)": "01ffc9a7",
    "totalSupply()": "18160ddd",
    "transferOwnership(address)": "f2fde38b",
    "unassignRole(bytes32,bytes32)": "c1b2bc96",
    "unlockFunction(bytes4)": "7f09d085",
    "updateEntity(bytes32,(bytes32,uint256,uint256,uint256,bool))": "73abdfa5",
    "updateRoleAssigner(string,string)": "6362aeb4",
    "updateRoleGroup(string,string,bool)": "ff3406ce",
    "updateUpgradeExpiration(uint256)": "371d6244",
    "withdrawAllDividends(bytes32,bytes32)": "ad747f2f",
    "withdrawDividend(bytes32,bytes32,bytes32)": "33f6dfd8",
    "wrapToken(bytes32)": "7dfcdf2a",
    "wrapperInternalTransferFrom(bytes32,bytes32,bytes32,uint256)": "1ed7db65"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addSupportedExternalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_objectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_contextId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"assignRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTradingCommissions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roughCommissionPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionNaymsLtd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionNDF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionSTM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionMaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommissions\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCommissions\",\"name\":\"tc\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_assignerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_objectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_contextId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"}],\"name\":\"canAssign\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"group\",\"type\":\"string\"}],\"name\":\"canGroupAssignRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_policyId\",\"type\":\"bytes32\"}],\"name\":\"cancelSimplePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancelUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"checkAndUpdateSimplePolicyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_entityAdmin\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizedCapacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"simplePolicyEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct Entity\",\"name\":\"_entityData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"}],\"name\":\"createEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_policyId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"entityIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"internalType\":\"struct Stakeholders\",\"name\":\"_stakeholders\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturationDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fundsLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimsPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumsPaid\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commissionReceivers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"commissionBasisPoints\",\"type\":\"uint256[]\"}],\"internalType\":\"struct SimplePolicy\",\"name\":\"_simplePolicy\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"}],\"name\":\"createSimplePolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"createUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparatorV4\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"enableEntityTokenization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sellToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_buyToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_buyAmount\",\"type\":\"uint256\"}],\"name\":\"executeLimitOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTokenCommissionsPaid_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTokenCommissionsPaid_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_externalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiverId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"externalWithdrawFromEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_externalTokenId\",\"type\":\"bytes32\"}],\"name\":\"getAddressFromExternalTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sellToken\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_buyToken\",\"type\":\"bytes32\"}],\"name\":\"getBestOfferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_userId\",\"type\":\"bytes32\"}],\"name\":\"getEntity\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"entityId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"}],\"name\":\"getEntityInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizedCapacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"simplePolicyEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct Entity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastOfferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDividendDenominations\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getObjectMeta\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"parent\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenWrapper\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"creator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sellToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountInitial\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"buyToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmountInitial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSchedule\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rankNext\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rankPrev\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketInfo\",\"name\":\"_offerState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPremiumCommissionBasisPoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"premiumCommissionNaymsLtdBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumCommissionNDFBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumCommissionSTMBP\",\"type\":\"uint16\"}],\"internalType\":\"struct PolicyCommissionsBasisPoints\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"objectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"contextId\",\"type\":\"bytes32\"}],\"name\":\"getRoleInContext\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturationDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_offchainDataHash\",\"type\":\"bytes32\"}],\"name\":\"getSigningHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"signingHash_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getSimplePolicyInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturationDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fundsLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"claimsPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premiumsPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct SimplePolicyInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedExternalTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingCommissionsBasisPoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tradingCommissionTotalBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionNaymsLtdBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionNDFBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionSTMBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionMakerBP\",\"type\":\"uint16\"}],\"internalType\":\"struct TradingCommissionsBasisPoints\",\"name\":\"bp\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getUpgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpgradeExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upgradeExpiration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUserIdFromAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"userId\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dividendTokenId\",\"type\":\"bytes32\"}],\"name\":\"getWithdrawableDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_entityPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"structHash\",\"type\":\"bytes32\"}],\"name\":\"hashTypedDataV4\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"accountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"internalBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"internalBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"internalTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"internalTransferFromEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"isActiveOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDiamondInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"isFunctionLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_objectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_contextId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_group\",\"type\":\"string\"}],\"name\":\"isInGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isObject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_objectId\",\"type\":\"bytes32\"}],\"name\":\"isObjectTokenizable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_objectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_contextId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_group\",\"type\":\"string\"}],\"name\":\"isParentInGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"group\",\"type\":\"string\"}],\"name\":\"isRoleInGroup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"isSupportedExternalToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"}],\"name\":\"isTokenWrapped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAllFundTransferFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"lockFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payDividendFromEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_policyId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_insuredId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"paySimpleClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_policyId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"paySimplePremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_userId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"}],\"name\":\"setEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newMax\",\"type\":\"uint8\"}],\"name\":\"setMaxDividendDenominations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"premiumCommissionNaymsLtdBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumCommissionNDFBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"premiumCommissionSTMBP\",\"type\":\"uint16\"}],\"internalType\":\"struct PolicyCommissionsBasisPoints\",\"name\":\"_policyCommissions\",\"type\":\"tuple\"}],\"name\":\"setPolicyCommissionsBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tradingCommissionTotalBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionNaymsLtdBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionNDFBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionSTMBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionMakerBP\",\"type\":\"uint16\"}],\"internalType\":\"struct TradingCommissionsBasisPoints\",\"name\":\"_tradingCommissions\",\"type\":\"tuple\"}],\"name\":\"setTradingCommissionsBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalPrice\",\"type\":\"uint256\"}],\"name\":\"startTokenSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_strIn\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_objectId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_contextId\",\"type\":\"bytes32\"}],\"name\":\"unassignRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"unlockFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_entityId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizedCapacity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"simplePolicyEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct Entity\",\"name\":\"_entity\",\"type\":\"tuple\"}],\"name\":\"updateEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_assignerGroup\",\"type\":\"string\"}],\"name\":\"updateRoleAssigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_role\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_group\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_roleInGroup\",\"type\":\"bool\"}],\"name\":\"updateRoleGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"updateUpgradeExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ownerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"withdrawAllDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ownerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dividendTokenId\",\"type\":\"bytes32\"}],\"name\":\"withdrawDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_objectId\",\"type\":\"bytes32\"}],\"name\":\"wrapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"from\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapperInternalTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Every facet should be cut into this diamond.\",\"kind\":\"dev\",\"methods\":{\"addSupportedExternalToken(address)\":{\"params\":{\"_tokenAddress\":\"address of the token to support\"}},\"assignRole(bytes32,bytes32,string)\":{\"details\":\"Any object ID can be a context, system is a special context with highest priority\",\"params\":{\"_contextId\":\"ID of the context in which a role is being assigned\",\"_objectId\":\"ID of an object that is being assigned a role\",\"_role\":\"Name of the role being assigned\"}},\"balanceOf(address)\":{\"details\":\"Get token balance of given wallet.\",\"params\":{\"addr\":\"wallet whose balance to get.\"},\"returns\":{\"_0\":\"balance of wallet.\"}},\"calculateTradingCommissions(uint256)\":{\"details\":\"Calculate the trading commissions based on a buy amount.\",\"params\":{\"buyAmount\":\"The amount that the commissions payments are calculated from.\"},\"returns\":{\"tc\":\"TradingCommissions struct with metadata regarding the trade commission payment amounts.\"}},\"canAssign(bytes32,bytes32,bytes32,string)\":{\"details\":\"Check permission to assign to a role\",\"params\":{\"_assignerId\":\"The object ID of the user who is assigning a role to  another object.\",\"_contextId\":\"ID of the context in which permission is checked\",\"_objectId\":\"ID of an object that is being checked for assigning rights\",\"_role\":\"name of the role to check\"},\"returns\":{\"_0\":\"true if user the right to assign, false otherwise\"}},\"canGroupAssignRole(string,string)\":{\"details\":\"Get whether given group can assign given role.\",\"params\":{\"group\":\"the group.\",\"role\":\"the role.\"},\"returns\":{\"_0\":\"true if role can be assigned by group, false otherwise.\"}},\"cancelOffer(uint256)\":{\"details\":\"This function can be frontrun: In the scenario where a user wants to cancel an unfavorable market offer, an attacker can potentially monitor and identify       that the user has called this method, determine that filling this market offer is profitable, and as a result call executeLimitOffer with a higher gas price to have       their transaction filled before the user can have cancelOffer filled. The most ideal situation for the user is to not have placed the unfavorable market offer       in the first place since an attacker can always monitor our marketplace and potentially identify profitable market offers. Our UI will aide users in not placing       market offers that are obviously unfavorable to the user and/or seem like mistake orders. In the event that a user needs to cancel an offer, it is recommended to       use Flashbots in order to privately send your transaction so an attack cannot be triggered from monitoring the mempool for calls to cancelOffer. A user is recommended       to change their RPC endpoint to point to https://rpc.flashbots.net when calling cancelOffer. We will add additional documentation to aide our users in this process.       More information on using Flashbots: https://docs.flashbots.net/flashbots-protect/rpc/quick-start/\",\"params\":{\"_offerId\":\"offer ID\"}},\"cancelSimplePolicy(bytes32)\":{\"details\":\"Cancel a simple policy\",\"params\":{\"_policyId\":\"Id of the simple policy\"}},\"cancelUpgrade(bytes32)\":{\"details\":\"This will set the mapping AppStorage.upgradeScheduled back to 0.\",\"params\":{\"id\":\"This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[].\"}},\"checkAndUpdateSimplePolicyState(bytes32)\":{\"details\":\"Check and update simple policy state\",\"params\":{\"_id\":\"Id of the simple policy\"}},\"createEntity(bytes32,bytes32,(bytes32,uint256,uint256,uint256,bool),bytes32)\":{\"details\":\"An entity can be created with a zero max capacity! This is in the event where an entity cannot write any policies.\",\"params\":{\"_dataHash\":\"hash of the offchain data\",\"_entityAdmin\":\"Unique ID of the entity administrator\",\"_entityData\":\"remaining entity metadata\",\"_entityId\":\"Unique ID for the entity\"}},\"createSimplePolicy(bytes32,bytes32,(bytes32[],bytes32[],bytes[]),(uint256,uint256,bytes32,uint256,bool,bool,uint256,uint256,bytes32[],uint256[]),bytes32)\":{\"params\":{\"_dataHash\":\"hash of the offchain data\",\"_entityId\":\"id of the entity\",\"_policyId\":\"id of the policy\",\"_simplePolicy\":\"policy to create\",\"_stakeholders\":\"Struct of roles, entity IDs and signatures for the policy\"}},\"createUpgrade(bytes32)\":{\"details\":\"The diamondCut() has been modified to check if the upgrade has been scheduled. This method needs to be called in order      for an upgrade to be executed.\",\"params\":{\"id\":\"This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[].\"}},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"_calldata\":\"A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init\",\"_diamondCut\":\"Contains the facet addresses and function selectors\",\"_init\":\"The address of the contract or facet to execute _calldata\"}},\"domainSeparatorV4()\":{\"details\":\"Returns the domain separator for the current chain.\"},\"enableEntityTokenization(bytes32,string,string)\":{\"params\":{\"_entityId\":\"ID of the entity\",\"_name\":\"The name assigned to the entity token\",\"_symbol\":\"The symbol assigned to the entity token\"}},\"executeLimitOffer(bytes32,uint256,bytes32,uint256)\":{\"params\":{\"_buyAmount\":\"Amount to buy.\",\"_buyToken\":\"Token to buy.\",\"_sellAmount\":\"Amount to sell.\",\"_sellToken\":\"Token to sell.\"},\"returns\":{\"buyTokenCommissionsPaid_\":\"The amount of the buy token paid as commissions on this particular order.\",\"offerId_\":\"returns >0 if a limit offer was created on the market because the offer couldn't be totally fulfilled immediately. In this case the return value is the created offer's id.\",\"sellTokenCommissionsPaid_\":\"The amount of the sell token paid as commissions on this particular order.\"}},\"externalDeposit(address,uint256)\":{\"details\":\"Deposit from msg.sender to their associated entity\",\"params\":{\"_amount\":\"deposit amount\",\"_externalTokenAddress\":\"Token address\"}},\"externalWithdrawFromEntity(bytes32,address,address,uint256)\":{\"details\":\"Withdraw from entity to an external account\",\"params\":{\"_amount\":\"amount to withdraw\",\"_entityId\":\"Internal ID of the entity the user is withdrawing from\",\"_externalTokenAddress\":\"Token address\",\"_receiverId\":\"Internal ID of the account receiving the funds\"}},\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"facetFunctionSelectors_\":\"facetFunctionSelectors_\"}},\"facets()\":{\"returns\":{\"facets_\":\"Facet\"}},\"getAddressFromExternalTokenId(bytes32)\":{\"details\":\"Convert the bytes32 external token ID to its respective ERC20 contract address\",\"params\":{\"_externalTokenId\":\"The ID assigned to an external token\"},\"returns\":{\"tokenAddress\":\"Contract address\"}},\"getBestOfferId(bytes32,bytes32)\":{\"details\":\"This means finding the highest sellToken-per-buyToken price, i.e. price = sellToken / buyToken\",\"returns\":{\"_0\":\"offerId, or 0 if no current best is available.\"}},\"getEntity(bytes32)\":{\"details\":\"Gets the entity related to the user\",\"params\":{\"_userId\":\"Unique platform ID of the user account\"},\"returns\":{\"entityId\":\"Unique platform ID of the entity\"}},\"getEntityInfo(bytes32)\":{\"details\":\"Get the Entity data for a given entityId\",\"params\":{\"_entityId\":\"ID of the entity\"},\"returns\":{\"_0\":\"Entity struct with metadata of the entity\"}},\"getLastOfferId()\":{\"details\":\"Get last created offer.\",\"returns\":{\"_0\":\"offer id.\"}},\"getLockedBalance(bytes32,bytes32)\":{\"params\":{\"_entityId\":\"Unique platform ID of the entity.\",\"_tokenId\":\"The ID assigned to an external token.\"},\"returns\":{\"amount\":\"of tokens that the entity has for sale in the marketplace.\"}},\"getMaxDividendDenominations()\":{\"returns\":{\"_0\":\"max dividend denominations\"}},\"getObjectMeta(bytes32)\":{\"details\":\"Get meta of given object.\",\"params\":{\"_id\":\"object id.\"},\"returns\":{\"dataHash\":\"object data hash\",\"parent\":\"object parent\",\"tokenName\":\"object token name\",\"tokenSymbol\":\"object token symbol\",\"tokenWrapper\":\"object token ERC20 wrapper address\"}},\"getOffer(uint256)\":{\"details\":\"Get the details of the offer #`_offerId`\",\"params\":{\"_offerId\":\"ID of a particular offer\"},\"returns\":{\"_offerState\":\"details of the offer\"}},\"getPremiumCommissionBasisPoints()\":{\"returns\":{\"_0\":\"PolicyCommissionsBasisPoints struct containing the individual basis points set for each policy commission receiver.\"}},\"getRoleInContext(bytes32,bytes32)\":{\"params\":{\"contextId\":\"ID of the context in which the objectId's role is being checked\",\"objectId\":\"ID of an object that is being checked for its assigned role in a specific context\"},\"returns\":{\"_0\":\"roleId objectId's role in the contextId\"}},\"getSigningHash(uint256,uint256,bytes32,uint256,bytes32)\":{\"details\":\"Generate a simple policy hash for singing by the stakeholders\",\"params\":{\"_asset\":\"ID of the underlying asset, used as collateral and to pay out claims\",\"_limit\":\"Policy coverage limit\",\"_maturationDate\":\"Date after which policy becomes matured\",\"_offchainDataHash\":\"Hash of all the important policy data stored offchain\",\"_startDate\":\"Date when policy becomes active\"},\"returns\":{\"signingHash_\":\"hash for signing\"}},\"getSimplePolicyInfo(bytes32)\":{\"details\":\"Get simple policy info\",\"params\":{\"_id\":\"Id of the simple policy\"},\"returns\":{\"_0\":\"Simple policy metadata\"}},\"getSupportedExternalTokens()\":{\"returns\":{\"_0\":\"array containing address of all supported tokens\"}},\"getSystemId()\":{\"returns\":{\"_0\":\"System Identifier\"}},\"getTradingCommissionsBasisPoints()\":{\"returns\":{\"bp\":\"- TradingCommissionsBasisPoints struct containing the individual basis points set for each marketplace commission receiver.\"}},\"getUpgrade(bytes32)\":{\"details\":\"This will get the value from AppStorage.upgradeScheduled  mapping.\",\"params\":{\"id\":\"This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[].\"}},\"getUpgradeExpiration()\":{\"details\":\"This will get the value from AppStorage.upgradeExpiration. AppStorage.upgradeExpiration is added to the block.timestamp to create the upgrade expiration date.\"},\"getUserIdFromAddress(address)\":{\"details\":\"Convert address to platform ID\",\"params\":{\"addr\":\"Account address\"},\"returns\":{\"userId\":\"Unique platform ID\"}},\"getWithdrawableDividend(bytes32,bytes32,bytes32)\":{\"details\":\"Divident available for an entity to withdraw\",\"params\":{\"_dividendTokenId\":\"Unique ID of dividend token\",\"_entityId\":\"Unique ID of the entity\",\"_tokenId\":\"Unique ID of token\"},\"returns\":{\"_entityPayout\":\"accumulated dividend\"}},\"hashTypedDataV4(bytes32)\":{\"details\":\"Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this function returns the hash of the fully encoded EIP712 message for this domain. This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example: ```solidity bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(     keccak256(\\\"Mail(address to,string contents)\\\"),     mailTo,     keccak256(bytes(mailContents)) ))); address signer = ECDSA.recover(digest, signature); ```\"},\"internalBalanceOf(bytes32,bytes32)\":{\"details\":\"Internal balance for given account\",\"params\":{\"tokenId\":\"Internal ID of the asset\"},\"returns\":{\"_0\":\"current balance\"}},\"internalTokenSupply(bytes32)\":{\"details\":\"Total supply of platform asset\",\"params\":{\"tokenId\":\"Internal ID of the asset\"},\"returns\":{\"_0\":\"current balance\"}},\"internalTransferFromEntity(bytes32,bytes32,uint256)\":{\"details\":\"Transfer tokens internally\",\"params\":{\"to\":\"token receiver\",\"tokenId\":\"Internal ID of the token\"}},\"isActiveOffer(uint256)\":{\"details\":\"Check if the offer #`_offerId` is active or not.\",\"params\":{\"_offerId\":\"ID of a particular offer\"},\"returns\":{\"_0\":\"active or not\"}},\"isDiamondInitialized()\":{\"details\":\"This will get the value from AppStorage.diamondInitialized.\"},\"isFunctionLocked(bytes4)\":{\"details\":\"This views FunctionLockedStorage.lock\",\"params\":{\"functionSelector\":\"the bytes4 function selector\"}},\"isInGroup(bytes32,bytes32,string)\":{\"details\":\"Assigning a role to the object makes it a member of a corresponding role group\",\"params\":{\"_contextId\":\"Context in which membership should be checked\",\"_group\":\"name of the role group\",\"_objectId\":\"ID of an object that is being checked for role group membership\"},\"returns\":{\"_0\":\"true if object with given ID is a member, false otherwise\"}},\"isObject(bytes32)\":{\"details\":\"Get whether given id is an object in the system.\",\"params\":{\"_id\":\"object id.\"},\"returns\":{\"_0\":\"true if it is an object, false otherwise\"}},\"isObjectTokenizable(bytes32)\":{\"params\":{\"_objectId\":\"ID of the object\"}},\"isParentInGroup(bytes32,bytes32,string)\":{\"details\":\"Objects can have a parent object, i.e. entity is a parent of a user\",\"params\":{\"_contextId\":\"Context in which the role group membership is being checked\",\"_group\":\"name of the role group\",\"_objectId\":\"ID of an object whose parent is being checked for role group membership\"},\"returns\":{\"_0\":\"true if object's parent is a member of this role group, false otherwise\"}},\"isRoleInGroup(string,string)\":{\"details\":\"Get whether role is in group.\",\"params\":{\"group\":\"the group.\",\"role\":\"the role.\"},\"returns\":{\"_0\":\"true if role is in group, false otherwise.\"}},\"isSupportedExternalToken(bytes32)\":{\"params\":{\"_tokenId\":\"token address converted to bytes32\"},\"returns\":{\"_0\":\"whether token issupported or not\"}},\"isTokenWrapped(bytes32)\":{\"params\":{\"_entityId\":\"ID of the entity\"}},\"lockFunction(bytes4)\":{\"details\":\"This toggles FunctionLockedStorage.lock to true\",\"params\":{\"functionSelector\":\"the bytes4 function selector\"}},\"owner()\":{\"returns\":{\"owner_\":\"The address of the owner.\"}},\"payDividendFromEntity(bytes32,uint256)\":{\"details\":\"Transfer dividends to the entity\",\"params\":{\"amount\":\"the mamount of the dividend token to be distributed to NAYMS token holders.\",\"guid\":\"Globally unique identifier of a dividend distribution.\"}},\"paySimpleClaim(bytes32,bytes32,bytes32,uint256)\":{\"details\":\"Pay a claim of `_amount` for simple policy\",\"params\":{\"_amount\":\"Amount of the claim\",\"_claimId\":\"Id of the simple policy claim\",\"_insuredId\":\"Id of the insured party\",\"_policyId\":\"Id of the simple policy\"}},\"paySimplePremium(bytes32,uint256)\":{\"details\":\"Pay a premium of `_amount` on simple policy\",\"params\":{\"_amount\":\"Amount of the premium\",\"_policyId\":\"Id of the simple policy\"}},\"setEntity(bytes32,bytes32)\":{\"details\":\"Assign the user an entity. The entity must exist in order to associate it with a user.\",\"params\":{\"_entityId\":\"Unique platform ID of the entity\",\"_userId\":\"Unique platform ID of the user account\"}},\"setMaxDividendDenominations(uint8)\":{\"params\":{\"_newMax\":\"new value to be used.\"}},\"setPolicyCommissionsBasisPoints((uint16,uint16,uint16))\":{\"params\":{\"_policyCommissions\":\"policy commissions configuration to set\"}},\"setTradingCommissionsBasisPoints((uint16,uint16,uint16,uint16,uint16))\":{\"params\":{\"_tradingCommissions\":\"trading commissions configuration to set\"}},\"startTokenSale(bytes32,uint256,uint256)\":{\"details\":\"Entity tokens are minted when the sale is started\",\"params\":{\"_amount\":\"amount of entity tokens to put on sale\",\"_entityId\":\"ID of the entity\",\"_totalPrice\":\"total price of the tokens\"}},\"stringToBytes32(string)\":{\"params\":{\"_strIn\":\"a string\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"totalSupply()\":{\"details\":\"Get total supply of token.\",\"returns\":{\"_0\":\"total supply.\"}},\"transferOwnership(address)\":{\"details\":\"Set _newOwner to address(0) to renounce any ownership.\",\"params\":{\"_newOwner\":\"The address of the new owner of the contract\"}},\"unassignRole(bytes32,bytes32)\":{\"details\":\"Any object ID can be a context, system is a special context with highest priority\",\"params\":{\"_contextId\":\"ID of the context in which a role membership is being revoked\",\"_objectId\":\"ID of an object that is being unassigned from a role\"}},\"unlockFunction(bytes4)\":{\"details\":\"This toggles FunctionLockedStorage.lock to false\",\"params\":{\"functionSelector\":\"the bytes4 function selector\"}},\"updateEntity(bytes32,(bytes32,uint256,uint256,uint256,bool))\":{\"params\":{\"_entity\":\"metadata of the entity\",\"_entityId\":\"ID of the entity\"}},\"updateRoleAssigner(string,string)\":{\"details\":\"Update who has permission to assign this role\",\"params\":{\"_assignerGroup\":\"Group who can assign members to this role\",\"_role\":\"name of the role\"}},\"updateRoleGroup(string,string,bool)\":{\"details\":\"Update role group memebership\",\"params\":{\"_group\":\"name of the group\",\"_role\":\"name of the role\",\"_roleInGroup\":\"is member of\"}},\"updateUpgradeExpiration(uint256)\":{\"details\":\"When createUpgrade() is called, it allows a diamondCut() upgrade to be executed. This upgrade must be executed before the      upgrade expires. The upgrade expires based on when the upgrade was scheduled (when createUpgrade() was called) + AppStorage.upgradeExpiration.\",\"params\":{\"duration\":\"The duration until the upgrade expires.\"}},\"withdrawAllDividends(bytes32,bytes32)\":{\"details\":\"Dividends can be available in more than one dividend denomination. This method will withdraw all available dividends in the different dividend denominations.\",\"params\":{\"ownerId\":\"Unique ID of the dividend receiver\",\"tokenId\":\"Unique ID of token\"}},\"withdrawDividend(bytes32,bytes32,bytes32)\":{\"details\":\"Transfer dividends to the entity\",\"params\":{\"dividendTokenId\":\"Unique ID of dividend token\",\"ownerId\":\"Unique ID of the dividend receiver\",\"tokenId\":\"Unique ID of token\"}},\"wrapToken(bytes32)\":{\"params\":{\"_objectId\":\"ID of the tokenized object\"}},\"wrapperInternalTransferFrom(bytes32,bytes32,bytes32,uint256)\":{\"details\":\"Transfer tokens internally between two IDs\",\"params\":{\"from\":\"token sender\",\"to\":\"token receiver\",\"tokenId\":\"Internal ID of the token\"}}},\"title\":\"Nayms Diamond\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSupportedExternalToken(address)\":{\"notice\":\"Add another token to the supported tokens list\"},\"assignRole(bytes32,bytes32,string)\":{\"notice\":\"Assign a `_roleId` to the object in given context\"},\"canAssign(bytes32,bytes32,bytes32,string)\":{\"notice\":\"Check whether a user can assign specific object to the `_role` role in given context\"},\"canGroupAssignRole(string,string)\":{\"notice\":\"Get whether given group can assign given role.\"},\"cancelOffer(uint256)\":{\"notice\":\"Cancel offer #`_offerId`. This will cancel the offer so that it's no longer active.\"},\"cancelUpgrade(bytes32)\":{\"notice\":\"Cancel the following upgrade hash: `id`\"},\"createEntity(bytes32,bytes32,(bytes32,uint256,uint256,uint256,bool),bytes32)\":{\"notice\":\"Create an entity\"},\"createSimplePolicy(bytes32,bytes32,(bytes32[],bytes32[],bytes[]),(uint256,uint256,bytes32,uint256,bool,bool,uint256,uint256,bytes32[],uint256[]),bytes32)\":{\"notice\":\"Create a Simple Policy\"},\"createUpgrade(bytes32)\":{\"notice\":\"Approve the following upgrade hash: `id`\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"Add/replace/remove any number of functions and optionally execute         a function with delegatecall\"},\"enableEntityTokenization(bytes32,string,string)\":{\"notice\":\"Enable an entity to be tokenized\"},\"executeLimitOffer(bytes32,uint256,bytes32,uint256)\":{\"notice\":\"Execute a limit offer.\"},\"externalDeposit(address,uint256)\":{\"notice\":\"Deposit funds into msg.sender's Nayms platform entity\"},\"externalWithdrawFromEntity(bytes32,address,address,uint256)\":{\"notice\":\"Withdraw funds out of Nayms platform\"},\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by a diamond.\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors supported by a specific facet.\"},\"facets()\":{\"notice\":\"Gets all facet addresses and their four byte function selectors.\"},\"getAddressFromExternalTokenId(bytes32)\":{\"notice\":\"Get the token address from ID of the external token\"},\"getBestOfferId(bytes32,bytes32)\":{\"notice\":\"Get current best offer for given token pair.\"},\"getEntity(bytes32)\":{\"notice\":\"Get the entity for the user\"},\"getEntityInfo(bytes32)\":{\"notice\":\"Get the the data for entity with ID: `_entityId`\"},\"getLockedBalance(bytes32,bytes32)\":{\"notice\":\"Get the amount of tokens that an entity has for sale in the marketplace.\"},\"getMaxDividendDenominations()\":{\"notice\":\"Get the max dividend denominations value\"},\"getPremiumCommissionBasisPoints()\":{\"notice\":\"Get the policy premium commissions basis points.\"},\"getRoleInContext(bytes32,bytes32)\":{\"notice\":\"Get a user's (an objectId's) assigned role in a specific context\"},\"getSupportedExternalTokens()\":{\"notice\":\"Get the supported tokens list as an array\"},\"getSystemId()\":{\"notice\":\"Gets the System context ID.\"},\"getTradingCommissionsBasisPoints()\":{\"notice\":\"Get the marketplace's trading commissions basis points.\"},\"getUpgrade(bytes32)\":{\"notice\":\"Get the expiry date for provided upgrade hash.\"},\"getUpgradeExpiration()\":{\"notice\":\"Get the upgrade expiration period.\"},\"getUserIdFromAddress(address)\":{\"notice\":\"Get the platform ID of `addr` account\"},\"getWithdrawableDividend(bytes32,bytes32,bytes32)\":{\"notice\":\"Get withdrawable dividend amount\"},\"internalBalanceOf(bytes32,bytes32)\":{\"notice\":\"Gets balance of an account within platform\"},\"internalTokenSupply(bytes32)\":{\"notice\":\"Current supply for the asset\"},\"internalTransferFromEntity(bytes32,bytes32,uint256)\":{\"notice\":\"Internal transfer of `amount` tokens\"},\"isDiamondInitialized()\":{\"notice\":\"Check if the diamond has been initialized.\"},\"isFunctionLocked(bytes4)\":{\"notice\":\"Check if a function has been locked by a system admin\"},\"isInGroup(bytes32,bytes32,string)\":{\"notice\":\"Checks if an object belongs to `_group` group in given context\"},\"isObjectTokenizable(bytes32)\":{\"notice\":\"Check if object can be tokenized\"},\"isParentInGroup(bytes32,bytes32,string)\":{\"notice\":\"Check whether a parent object belongs to the `_group` group in given context\"},\"isRoleInGroup(string,string)\":{\"notice\":\"Get whether role is in group.\"},\"isSupportedExternalToken(bytes32)\":{\"notice\":\"Is the specified tokenId an external ERC20 that is supported by the Nayms platform?\"},\"isTokenWrapped(bytes32)\":{\"notice\":\"Check if an entity token is wrapped as ERC20\"},\"lockFunction(bytes4)\":{\"notice\":\"System Admin can lock a function\"},\"owner()\":{\"notice\":\"Get the address of the owner\"},\"payDividendFromEntity(bytes32,uint256)\":{\"notice\":\"Pay `amount` of dividends\"},\"setEntity(bytes32,bytes32)\":{\"notice\":\"Set the entity for the user\"},\"setMaxDividendDenominations(uint8)\":{\"notice\":\"Set `_newMax` as the max dividend denominations value.\"},\"setPolicyCommissionsBasisPoints((uint16,uint16,uint16))\":{\"notice\":\"Update policy commission basis points configuration.\"},\"setTradingCommissionsBasisPoints((uint16,uint16,uint16,uint16,uint16))\":{\"notice\":\"Update trading commission basis points configuration.\"},\"startTokenSale(bytes32,uint256,uint256)\":{\"notice\":\"Start token sale of `_amount` tokens for total price of `_totalPrice`\"},\"stringToBytes32(string)\":{\"notice\":\"Convert a string type to a bytes32 type\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"transferOwnership(address)\":{\"notice\":\"Set the address of the new owner of the contract\"},\"unassignRole(bytes32,bytes32)\":{\"notice\":\"Unassign object from a role in given context\"},\"unlockFunction(bytes4)\":{\"notice\":\"System Admin can unlock a function\"},\"updateEntity(bytes32,(bytes32,uint256,uint256,uint256,bool))\":{\"notice\":\"Update entity metadata\"},\"updateRoleAssigner(string,string)\":{\"notice\":\"Update who can assign `_role` role\"},\"updateRoleGroup(string,string,bool)\":{\"notice\":\"Update role group memebership for `_role` role and `_group` group\"},\"updateUpgradeExpiration(uint256)\":{\"notice\":\"Update the diamond cut upgrade expiration period.\"},\"withdrawAllDividends(bytes32,bytes32)\":{\"notice\":\"Withdraws a user's available dividends.\"},\"withdrawDividend(bytes32,bytes32,bytes32)\":{\"notice\":\"Withdraw available dividend\"},\"wrapToken(bytes32)\":{\"notice\":\"Wrap an object token as ERC20\"},\"wrapperInternalTransferFrom(bytes32,bytes32,bytes32,uint256)\":{\"notice\":\"Internal transfer of `amount` tokens `from` -> `to`\"}},\"notice\":\"Everything is a part of one big diamond.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/diamonds/nayms/INayms.sol\":\"INayms\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/ozv4/\",\":@uniswap/lib/=lib/solidity-lib/\",\":@uniswap/v2-core/=lib/v2-core/\",\":@uniswap/v3-core/=lib/v3-core/\",\":@uniswap/v3-periphery/=lib/v3-periphery/\",\":base64-sol/=lib/base64/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":ozv4/=lib/ozv4/\",\":script/=script/\",\":solidity-lib/=lib/solidity-lib/contracts/\",\":solidity-stringutils/=lib/solidity-stringutils/src/\",\":solmate/=lib/solmate/src/\",\":src/=src/\",\":test/=test/\"]},\"sources\":{\"src/diamonds/nayms/INayms.sol\":{\"keccak256\":\"0x5e4923ab77351098cd809238e56b71e940514730e652520aa85ae0deec4bdadd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://befcf0b889c99292d49a724d4b59d61fd52e1fd7cbb4f8ed64d6fc6a2c732ed1\",\"dweb:/ipfs/QmecX5Mfx8mDWLn4axucUHSG6MBD7h9cFho2x1QHLx2umi\"]},\"src/diamonds/nayms/interfaces/FreeStructs.sol\":{\"keccak256\":\"0xbcbdb86f63372f83a5014433874e8ae486ac5d219889203393e63337b4f3a384\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0538c135fa5950fbd362427f5d2c3d4a15e568bd84a151e6446bca72c1a955a4\",\"dweb:/ipfs/QmQC4uX42LXPBD5nSHzSg7cf4pU8GqxQrAmoTkoGUgAzRD\"]},\"src/diamonds/nayms/interfaces/IACLFacet.sol\":{\"keccak256\":\"0xd72d59aa31c0834a96493e2a896bc9ee2963f906ab5c907184aeb1e7b8263176\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e55525f0117636d55524b0f56513c4c14e5d533994fbf303d05813ba27705931\",\"dweb:/ipfs/QmXiUgcRkULmBTeSXDv96sb584H9eQNX3wqN88qUVUBFdh\"]},\"src/diamonds/nayms/interfaces/IAdminFacet.sol\":{\"keccak256\":\"0xe7008511e360617181eeec1ecf76743bf9253501962c84a4931a72eb65aa1a1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4b3c7852635cda5c013408accfe40646a6180bfbd74ee77f9928167e4754b631\",\"dweb:/ipfs/QmTwYLEXEiWZzVooS1SAtev2GfSfKTdqoTGL8uXQeojyJa\"]},\"src/diamonds/nayms/interfaces/IEntityFacet.sol\":{\"keccak256\":\"0xce32aa04ea48b38030d2b8650d0989b37cde6e48bcbbb133ff8e7e7ffd0f78e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c970eb23c90a71386c7524abf0faca59dada315598df56826312ef15065556f5\",\"dweb:/ipfs/QmZCxwYYyPQyKgrpR7cqKWSw8aCbDHCYCi4JZUVdkKrQRY\"]},\"src/diamonds/nayms/interfaces/IGovernanceFacet.sol\":{\"keccak256\":\"0x521a78755df804dc302abec66a068c8529c7976893f7b5e9de6d8b5f463044bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7d94ca1e30c4302f6125b97306a29ee6bf1a141acb8447fbdd18630f342c666\",\"dweb:/ipfs/QmZZRkAVWLhXMbc31m5e3MZJVZ7JUKiXAnNDBm5Ap7isaN\"]},\"src/diamonds/nayms/interfaces/IMarketFacet.sol\":{\"keccak256\":\"0xf5bd6475cc57cf8e6b1b4517cfd3e1ccdeea590ba398a0a828c9a02bfd7ce047\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5beace8be7754de703ded6d95f04a6d75a291d993a0afa7a6f3addebb8769f2\",\"dweb:/ipfs/QmULQVQQQro6YxQE6SF6TKS2G3BhXuzyJKyGXZrKR3LXNH\"]},\"src/diamonds/nayms/interfaces/INaymsTokenFacet.sol\":{\"keccak256\":\"0xfdd01e5e0cd4dfea9196a3fa6dca3d277e394c7e1f6ea972e12620e04dcfd6aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://850e6bfc293916409884dcd223a8afba6cf8c1fd545935e5eb40cbe64fd79039\",\"dweb:/ipfs/QmYtHEdHZbQfrxkD417EcJbwe1tiCpLRWE2Rgm7yJTQ3UG\"]},\"src/diamonds/nayms/interfaces/ISimplePolicyFacet.sol\":{\"keccak256\":\"0xa19aacc7591f778a17b6238212567584d4f261dd035ea1a5430cc4acde135b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://796c08003a00a8fac916d3dd60f753b7eac13f0bcf063af738045008684d9369\",\"dweb:/ipfs/QmVntDBDnY7xXKVDh1hniz84v8XHcrXf8tm4pgANAnH7Ts\"]},\"src/diamonds/nayms/interfaces/ISystemFacet.sol\":{\"keccak256\":\"0x3fbb24b05dd3e2dbfe8541af0dc9f175e562a77fcdc549848b170b9b14462f45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c626e5e5487847d9c8931f7fcab85b483164714704261432418dfac239311452\",\"dweb:/ipfs/QmTWqLGW2EoJ2oZJx8LjUbAfu4WHnv4A6uYAWdxEuQ89c5\"]},\"src/diamonds/nayms/interfaces/ITokenizedVaultFacet.sol\":{\"keccak256\":\"0x02a9fc017690a2fd1424a67f2ecae15cd741fc381e3c755d141ca5dbfb78f368\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2e654d4947bfddda09340711ac961871527ba9587d300100036604b97d9668e7\",\"dweb:/ipfs/QmUg32HGvV17CHwu2tThPpVrojQwhuXEnfFe2WFwvqkqzF\"]},\"src/diamonds/nayms/interfaces/ITokenizedVaultIOFacet.sol\":{\"keccak256\":\"0x6e524d2ab08929f2d31c1f1dd3c5c6c3f3317b80f22c8536b4ba7421369b1f87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://646c0316fce39694cf11b020aa0b28496f31f2925cc31e795793977ac363fa12\",\"dweb:/ipfs/QmT9C9Ee5UuqzF9V6Rv7heJvoLGKXrd3KjYDQnzDyEVZs6\"]},\"src/diamonds/nayms/interfaces/IUserFacet.sol\":{\"keccak256\":\"0x3b7ed45fc97adf42268310737d3a5f2c07e9fa4d6105efbc3d16363c0ce4a839\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e996ea5a861ab4bd5da3a0e9bd4d0824cd12cdc21bc9563feb0ae24a0ae0e9bc\",\"dweb:/ipfs/Qmcaqi2NdUM8SJAupkznNQ3ey2DUE5JhXa7frG6AH3kw5o\"]},\"src/diamonds/shared/interfaces/IDiamondCut.sol\":{\"keccak256\":\"0x9f5fae94fa7eb7878762079d230687bd7184c60a0f1fdddf9775742bd5c495f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fd5f10ef1d46dc0c902fd83de013dc5fef5e144b168bfa9a418d6598bb1eb4b\",\"dweb:/ipfs/QmVgzifBPGZxxfwt2CuQMpVEdEmQWZNwpaJ2Nwfx3cvpn3\"]},\"src/diamonds/shared/interfaces/IDiamondLoupe.sol\":{\"keccak256\":\"0x27ca2115c56b2f09b4b4e24dc023e1d2ec0d6e1c603bdb30929d5bbda411cee0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0bc3bd5ac85edff564ecbe8896cf8be85a656f141c25c9705f02fad717cb6f9c\",\"dweb:/ipfs/QmYnQYgFapFvm7zwZMFFfGnERyd37mfVqHx8aT3HcCTDg2\"]},\"src/diamonds/shared/interfaces/IERC165.sol\":{\"keccak256\":\"0x13c14966128e5d95c060726fdfe204873e97df95d8092b65532e84d28bbeb6a4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://182cd2a57a4973dfe33b602219f92f46d8b5c93c2447c29299472740f4f39d9e\",\"dweb:/ipfs/QmTudnwW2V64G5FhetwDwmYTi7AaoFeksEXfV9Eq2SbDpc\"]},\"src/diamonds/shared/interfaces/IERC173.sol\":{\"keccak256\":\"0xfa7177a2353c17ceef7fb133fb547c7ce4fb9ad17f8fdcaca754fcec9c10f871\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd9f221cf880daa211ca7d9697a35de3a92311b1853048a9a62d49567cda947b\",\"dweb:/ipfs/QmWyV5Np2Dfxxs9PfoGGC24YJ1KsHBhP9ijsGrwQ5DpJ3Z\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "struct IDiamondCut.FacetCut[]",
              "name": "_diamondCut",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "facetAddress",
                  "type": "address"
                },
                {
                  "internalType": "enum IDiamondCut.FacetCutAction",
                  "name": "action",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "functionSelectors",
                  "type": "bytes4[]"
                }
              ],
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "_init",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "_calldata",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DiamondCut",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_tokenAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addSupportedExternalToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_objectId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_contextId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "_role",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "assignRole"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateTradingCommissions",
          "outputs": [
            {
              "internalType": "struct TradingCommissions",
              "name": "tc",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "roughCommissionPaid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "commissionNaymsLtd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "commissionNDF",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "commissionSTM",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "commissionMaker",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalCommissions",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_assignerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_objectId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_contextId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "_role",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "canAssign",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "role",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "group",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "canGroupAssignRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_offerId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancelOffer"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_policyId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancelSimplePolicy"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancelUpgrade"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "checkAndUpdateSimplePolicyState"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_entityAdmin",
              "type": "bytes32"
            },
            {
              "internalType": "struct Entity",
              "name": "_entityData",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "assetId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "collateralRatio",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxCapacity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "utilizedCapacity",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "simplePolicyEnabled",
                  "type": "bool"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "_dataHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createEntity"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_policyId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            },
            {
              "internalType": "struct Stakeholders",
              "name": "_stakeholders",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32[]",
                  "name": "roles",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "entityIds",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "bytes[]",
                  "name": "signatures",
                  "type": "bytes[]"
                }
              ]
            },
            {
              "internalType": "struct SimplePolicy",
              "name": "_simplePolicy",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maturationDate",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "limit",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "fundsLocked",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "cancelled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "claimsPaid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "premiumsPaid",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "commissionReceivers",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "commissionBasisPoints",
                  "type": "uint256[]"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "_dataHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createSimplePolicy"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createUpgrade"
        },
        {
          "inputs": [
            {
              "internalType": "struct IDiamondCut.FacetCut[]",
              "name": "_diamondCut",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "facetAddress",
                  "type": "address"
                },
                {
                  "internalType": "enum IDiamondCut.FacetCutAction",
                  "name": "action",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "functionSelectors",
                  "type": "bytes4[]"
                }
              ]
            },
            {
              "internalType": "address",
              "name": "_init",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "_calldata",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "diamondCut"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "domainSeparatorV4",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "enableEntityTokenization"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_sellToken",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "_buyToken",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_buyAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "executeLimitOffer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "offerId_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyTokenCommissionsPaid_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellTokenCommissionsPaid_",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_externalTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "externalDeposit"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "_receiverId",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_externalTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "externalWithdrawFromEntity"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "_functionSelector",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "facetAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "facetAddress_",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "facetAddresses",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "facetAddresses_",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_facet",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "facetFunctionSelectors",
          "outputs": [
            {
              "internalType": "bytes4[]",
              "name": "facetFunctionSelectors_",
              "type": "bytes4[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "facets",
          "outputs": [
            {
              "internalType": "struct IDiamondLoupe.Facet[]",
              "name": "facets_",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "facetAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "functionSelectors",
                  "type": "bytes4[]"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_externalTokenId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getAddressFromExternalTokenId",
          "outputs": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_sellToken",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_buyToken",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBestOfferId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_userId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getEntity",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "entityId",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getEntityInfo",
          "outputs": [
            {
              "internalType": "struct Entity",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "assetId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "collateralRatio",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxCapacity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "utilizedCapacity",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "simplePolicyEnabled",
                  "type": "bool"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getLastOfferId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_tokenId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getLockedBalance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getMaxDividendDenominations",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getObjectMeta",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "parent",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "tokenWrapper",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_offerId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOffer",
          "outputs": [
            {
              "internalType": "struct MarketInfo",
              "name": "_offerState",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "creator",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sellToken",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmountInitial",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "buyToken",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmountInitial",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feeSchedule",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "state",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rankNext",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rankPrev",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getPremiumCommissionBasisPoints",
          "outputs": [
            {
              "internalType": "struct PolicyCommissionsBasisPoints",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint16",
                  "name": "premiumCommissionNaymsLtdBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "premiumCommissionNDFBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "premiumCommissionSTMBP",
                  "type": "uint16"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "objectId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "contextId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoleInContext",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_maturationDate",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "_asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_limit",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "_offchainDataHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSigningHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "signingHash_",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSimplePolicyInfo",
          "outputs": [
            {
              "internalType": "struct SimplePolicyInfo",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "startDate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maturationDate",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "limit",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "fundsLocked",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "cancelled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "claimsPaid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "premiumsPaid",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getSupportedExternalTokens",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "pure",
          "type": "function",
          "name": "getSystemId",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getTradingCommissionsBasisPoints",
          "outputs": [
            {
              "internalType": "struct TradingCommissionsBasisPoints",
              "name": "bp",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionTotalBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionNaymsLtdBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionNDFBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionSTMBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionMakerBP",
                  "type": "uint16"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getUpgrade",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getUpgradeExpiration",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "upgradeExpiration",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getUserIdFromAddress",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "userId",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_dividendTokenId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getWithdrawableDividend",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "_entityPayout",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "structHash",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "hashTypedDataV4",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "accountId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "internalBalanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "from",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "internalBurn"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "internalTokenSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "to",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "internalTransferFromEntity"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_offerId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isActiveOffer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "isDiamondInitialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "functionSelector",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isFunctionLocked",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_objectId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_contextId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "_group",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isInGroup",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isObject",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_objectId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "isObjectTokenizable",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_objectId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_contextId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "_group",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isParentInGroup",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "role",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "group",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isRoleInGroup",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_tokenId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isSupportedExternalToken",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isTokenWrapped",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lockAllFundTransferFunctions"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "functionSelector",
              "type": "bytes4"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lockFunction"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "owner_",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "payDividendFromEntity"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_claimId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_policyId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_insuredId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "paySimpleClaim"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_policyId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "paySimplePremium"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_userId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setEntity"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "_newMax",
              "type": "uint8"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setMaxDividendDenominations"
        },
        {
          "inputs": [
            {
              "internalType": "struct PolicyCommissionsBasisPoints",
              "name": "_policyCommissions",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint16",
                  "name": "premiumCommissionNaymsLtdBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "premiumCommissionNDFBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "premiumCommissionSTMBP",
                  "type": "uint16"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPolicyCommissionsBasisPoints"
        },
        {
          "inputs": [
            {
              "internalType": "struct TradingCommissionsBasisPoints",
              "name": "_tradingCommissions",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionTotalBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionNaymsLtdBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionNDFBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionSTMBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionMakerBP",
                  "type": "uint16"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setTradingCommissionsBasisPoints"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_totalPrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "startTokenSale"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_strIn",
              "type": "string"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "stringToBytes32",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "result",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_objectId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_contextId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unassignRole"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "functionSelector",
              "type": "bytes4"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unlockFunction"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_entityId",
              "type": "bytes32"
            },
            {
              "internalType": "struct Entity",
              "name": "_entity",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "assetId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "collateralRatio",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxCapacity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "utilizedCapacity",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "simplePolicyEnabled",
                  "type": "bool"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateEntity"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_role",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_assignerGroup",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateRoleAssigner"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_role",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_group",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "_roleInGroup",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateRoleGroup"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateUpgradeExpiration"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "ownerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawAllDividends"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "ownerId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dividendTokenId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawDividend"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_objectId",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "wrapToken"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "from",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "to",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "wrapperInternalTransferFrom"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addSupportedExternalToken(address)": {
            "params": {
              "_tokenAddress": "address of the token to support"
            }
          },
          "assignRole(bytes32,bytes32,string)": {
            "details": "Any object ID can be a context, system is a special context with highest priority",
            "params": {
              "_contextId": "ID of the context in which a role is being assigned",
              "_objectId": "ID of an object that is being assigned a role",
              "_role": "Name of the role being assigned"
            }
          },
          "balanceOf(address)": {
            "details": "Get token balance of given wallet.",
            "params": {
              "addr": "wallet whose balance to get."
            },
            "returns": {
              "_0": "balance of wallet."
            }
          },
          "calculateTradingCommissions(uint256)": {
            "details": "Calculate the trading commissions based on a buy amount.",
            "params": {
              "buyAmount": "The amount that the commissions payments are calculated from."
            },
            "returns": {
              "tc": "TradingCommissions struct with metadata regarding the trade commission payment amounts."
            }
          },
          "canAssign(bytes32,bytes32,bytes32,string)": {
            "details": "Check permission to assign to a role",
            "params": {
              "_assignerId": "The object ID of the user who is assigning a role to  another object.",
              "_contextId": "ID of the context in which permission is checked",
              "_objectId": "ID of an object that is being checked for assigning rights",
              "_role": "name of the role to check"
            },
            "returns": {
              "_0": "true if user the right to assign, false otherwise"
            }
          },
          "canGroupAssignRole(string,string)": {
            "details": "Get whether given group can assign given role.",
            "params": {
              "group": "the group.",
              "role": "the role."
            },
            "returns": {
              "_0": "true if role can be assigned by group, false otherwise."
            }
          },
          "cancelOffer(uint256)": {
            "details": "This function can be frontrun: In the scenario where a user wants to cancel an unfavorable market offer, an attacker can potentially monitor and identify       that the user has called this method, determine that filling this market offer is profitable, and as a result call executeLimitOffer with a higher gas price to have       their transaction filled before the user can have cancelOffer filled. The most ideal situation for the user is to not have placed the unfavorable market offer       in the first place since an attacker can always monitor our marketplace and potentially identify profitable market offers. Our UI will aide users in not placing       market offers that are obviously unfavorable to the user and/or seem like mistake orders. In the event that a user needs to cancel an offer, it is recommended to       use Flashbots in order to privately send your transaction so an attack cannot be triggered from monitoring the mempool for calls to cancelOffer. A user is recommended       to change their RPC endpoint to point to https://rpc.flashbots.net when calling cancelOffer. We will add additional documentation to aide our users in this process.       More information on using Flashbots: https://docs.flashbots.net/flashbots-protect/rpc/quick-start/",
            "params": {
              "_offerId": "offer ID"
            }
          },
          "cancelSimplePolicy(bytes32)": {
            "details": "Cancel a simple policy",
            "params": {
              "_policyId": "Id of the simple policy"
            }
          },
          "cancelUpgrade(bytes32)": {
            "details": "This will set the mapping AppStorage.upgradeScheduled back to 0.",
            "params": {
              "id": "This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[]."
            }
          },
          "checkAndUpdateSimplePolicyState(bytes32)": {
            "details": "Check and update simple policy state",
            "params": {
              "_id": "Id of the simple policy"
            }
          },
          "createEntity(bytes32,bytes32,(bytes32,uint256,uint256,uint256,bool),bytes32)": {
            "details": "An entity can be created with a zero max capacity! This is in the event where an entity cannot write any policies.",
            "params": {
              "_dataHash": "hash of the offchain data",
              "_entityAdmin": "Unique ID of the entity administrator",
              "_entityData": "remaining entity metadata",
              "_entityId": "Unique ID for the entity"
            }
          },
          "createSimplePolicy(bytes32,bytes32,(bytes32[],bytes32[],bytes[]),(uint256,uint256,bytes32,uint256,bool,bool,uint256,uint256,bytes32[],uint256[]),bytes32)": {
            "params": {
              "_dataHash": "hash of the offchain data",
              "_entityId": "id of the entity",
              "_policyId": "id of the policy",
              "_simplePolicy": "policy to create",
              "_stakeholders": "Struct of roles, entity IDs and signatures for the policy"
            }
          },
          "createUpgrade(bytes32)": {
            "details": "The diamondCut() has been modified to check if the upgrade has been scheduled. This method needs to be called in order      for an upgrade to be executed.",
            "params": {
              "id": "This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[]."
            }
          },
          "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
            "params": {
              "_calldata": "A function call, including function selector and arguments                  _calldata is executed with delegatecall on _init",
              "_diamondCut": "Contains the facet addresses and function selectors",
              "_init": "The address of the contract or facet to execute _calldata"
            }
          },
          "domainSeparatorV4()": {
            "details": "Returns the domain separator for the current chain."
          },
          "enableEntityTokenization(bytes32,string,string)": {
            "params": {
              "_entityId": "ID of the entity",
              "_name": "The name assigned to the entity token",
              "_symbol": "The symbol assigned to the entity token"
            }
          },
          "executeLimitOffer(bytes32,uint256,bytes32,uint256)": {
            "params": {
              "_buyAmount": "Amount to buy.",
              "_buyToken": "Token to buy.",
              "_sellAmount": "Amount to sell.",
              "_sellToken": "Token to sell."
            },
            "returns": {
              "buyTokenCommissionsPaid_": "The amount of the buy token paid as commissions on this particular order.",
              "offerId_": "returns >0 if a limit offer was created on the market because the offer couldn't be totally fulfilled immediately. In this case the return value is the created offer's id.",
              "sellTokenCommissionsPaid_": "The amount of the sell token paid as commissions on this particular order."
            }
          },
          "externalDeposit(address,uint256)": {
            "details": "Deposit from msg.sender to their associated entity",
            "params": {
              "_amount": "deposit amount",
              "_externalTokenAddress": "Token address"
            }
          },
          "externalWithdrawFromEntity(bytes32,address,address,uint256)": {
            "details": "Withdraw from entity to an external account",
            "params": {
              "_amount": "amount to withdraw",
              "_entityId": "Internal ID of the entity the user is withdrawing from",
              "_externalTokenAddress": "Token address",
              "_receiverId": "Internal ID of the account receiving the funds"
            }
          },
          "facetAddress(bytes4)": {
            "details": "If facet is not found return address(0).",
            "params": {
              "_functionSelector": "The function selector."
            },
            "returns": {
              "facetAddress_": "The facet address."
            }
          },
          "facetAddresses()": {
            "returns": {
              "facetAddresses_": "facetAddresses_"
            }
          },
          "facetFunctionSelectors(address)": {
            "params": {
              "_facet": "The facet address."
            },
            "returns": {
              "facetFunctionSelectors_": "facetFunctionSelectors_"
            }
          },
          "facets()": {
            "returns": {
              "facets_": "Facet"
            }
          },
          "getAddressFromExternalTokenId(bytes32)": {
            "details": "Convert the bytes32 external token ID to its respective ERC20 contract address",
            "params": {
              "_externalTokenId": "The ID assigned to an external token"
            },
            "returns": {
              "tokenAddress": "Contract address"
            }
          },
          "getBestOfferId(bytes32,bytes32)": {
            "details": "This means finding the highest sellToken-per-buyToken price, i.e. price = sellToken / buyToken",
            "returns": {
              "_0": "offerId, or 0 if no current best is available."
            }
          },
          "getEntity(bytes32)": {
            "details": "Gets the entity related to the user",
            "params": {
              "_userId": "Unique platform ID of the user account"
            },
            "returns": {
              "entityId": "Unique platform ID of the entity"
            }
          },
          "getEntityInfo(bytes32)": {
            "details": "Get the Entity data for a given entityId",
            "params": {
              "_entityId": "ID of the entity"
            },
            "returns": {
              "_0": "Entity struct with metadata of the entity"
            }
          },
          "getLastOfferId()": {
            "details": "Get last created offer.",
            "returns": {
              "_0": "offer id."
            }
          },
          "getLockedBalance(bytes32,bytes32)": {
            "params": {
              "_entityId": "Unique platform ID of the entity.",
              "_tokenId": "The ID assigned to an external token."
            },
            "returns": {
              "amount": "of tokens that the entity has for sale in the marketplace."
            }
          },
          "getMaxDividendDenominations()": {
            "returns": {
              "_0": "max dividend denominations"
            }
          },
          "getObjectMeta(bytes32)": {
            "details": "Get meta of given object.",
            "params": {
              "_id": "object id."
            },
            "returns": {
              "dataHash": "object data hash",
              "parent": "object parent",
              "tokenName": "object token name",
              "tokenSymbol": "object token symbol",
              "tokenWrapper": "object token ERC20 wrapper address"
            }
          },
          "getOffer(uint256)": {
            "details": "Get the details of the offer #`_offerId`",
            "params": {
              "_offerId": "ID of a particular offer"
            },
            "returns": {
              "_offerState": "details of the offer"
            }
          },
          "getPremiumCommissionBasisPoints()": {
            "returns": {
              "_0": "PolicyCommissionsBasisPoints struct containing the individual basis points set for each policy commission receiver."
            }
          },
          "getRoleInContext(bytes32,bytes32)": {
            "params": {
              "contextId": "ID of the context in which the objectId's role is being checked",
              "objectId": "ID of an object that is being checked for its assigned role in a specific context"
            },
            "returns": {
              "_0": "roleId objectId's role in the contextId"
            }
          },
          "getSigningHash(uint256,uint256,bytes32,uint256,bytes32)": {
            "details": "Generate a simple policy hash for singing by the stakeholders",
            "params": {
              "_asset": "ID of the underlying asset, used as collateral and to pay out claims",
              "_limit": "Policy coverage limit",
              "_maturationDate": "Date after which policy becomes matured",
              "_offchainDataHash": "Hash of all the important policy data stored offchain",
              "_startDate": "Date when policy becomes active"
            },
            "returns": {
              "signingHash_": "hash for signing"
            }
          },
          "getSimplePolicyInfo(bytes32)": {
            "details": "Get simple policy info",
            "params": {
              "_id": "Id of the simple policy"
            },
            "returns": {
              "_0": "Simple policy metadata"
            }
          },
          "getSupportedExternalTokens()": {
            "returns": {
              "_0": "array containing address of all supported tokens"
            }
          },
          "getSystemId()": {
            "returns": {
              "_0": "System Identifier"
            }
          },
          "getTradingCommissionsBasisPoints()": {
            "returns": {
              "bp": "- TradingCommissionsBasisPoints struct containing the individual basis points set for each marketplace commission receiver."
            }
          },
          "getUpgrade(bytes32)": {
            "details": "This will get the value from AppStorage.upgradeScheduled  mapping.",
            "params": {
              "id": "This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[]."
            }
          },
          "getUpgradeExpiration()": {
            "details": "This will get the value from AppStorage.upgradeExpiration. AppStorage.upgradeExpiration is added to the block.timestamp to create the upgrade expiration date."
          },
          "getUserIdFromAddress(address)": {
            "details": "Convert address to platform ID",
            "params": {
              "addr": "Account address"
            },
            "returns": {
              "userId": "Unique platform ID"
            }
          },
          "getWithdrawableDividend(bytes32,bytes32,bytes32)": {
            "details": "Divident available for an entity to withdraw",
            "params": {
              "_dividendTokenId": "Unique ID of dividend token",
              "_entityId": "Unique ID of the entity",
              "_tokenId": "Unique ID of token"
            },
            "returns": {
              "_entityPayout": "accumulated dividend"
            }
          },
          "hashTypedDataV4(bytes32)": {
            "details": "Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this function returns the hash of the fully encoded EIP712 message for this domain. This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example: ```solidity bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(     keccak256(\"Mail(address to,string contents)\"),     mailTo,     keccak256(bytes(mailContents)) ))); address signer = ECDSA.recover(digest, signature); ```"
          },
          "internalBalanceOf(bytes32,bytes32)": {
            "details": "Internal balance for given account",
            "params": {
              "tokenId": "Internal ID of the asset"
            },
            "returns": {
              "_0": "current balance"
            }
          },
          "internalTokenSupply(bytes32)": {
            "details": "Total supply of platform asset",
            "params": {
              "tokenId": "Internal ID of the asset"
            },
            "returns": {
              "_0": "current balance"
            }
          },
          "internalTransferFromEntity(bytes32,bytes32,uint256)": {
            "details": "Transfer tokens internally",
            "params": {
              "to": "token receiver",
              "tokenId": "Internal ID of the token"
            }
          },
          "isActiveOffer(uint256)": {
            "details": "Check if the offer #`_offerId` is active or not.",
            "params": {
              "_offerId": "ID of a particular offer"
            },
            "returns": {
              "_0": "active or not"
            }
          },
          "isDiamondInitialized()": {
            "details": "This will get the value from AppStorage.diamondInitialized."
          },
          "isFunctionLocked(bytes4)": {
            "details": "This views FunctionLockedStorage.lock",
            "params": {
              "functionSelector": "the bytes4 function selector"
            }
          },
          "isInGroup(bytes32,bytes32,string)": {
            "details": "Assigning a role to the object makes it a member of a corresponding role group",
            "params": {
              "_contextId": "Context in which membership should be checked",
              "_group": "name of the role group",
              "_objectId": "ID of an object that is being checked for role group membership"
            },
            "returns": {
              "_0": "true if object with given ID is a member, false otherwise"
            }
          },
          "isObject(bytes32)": {
            "details": "Get whether given id is an object in the system.",
            "params": {
              "_id": "object id."
            },
            "returns": {
              "_0": "true if it is an object, false otherwise"
            }
          },
          "isObjectTokenizable(bytes32)": {
            "params": {
              "_objectId": "ID of the object"
            }
          },
          "isParentInGroup(bytes32,bytes32,string)": {
            "details": "Objects can have a parent object, i.e. entity is a parent of a user",
            "params": {
              "_contextId": "Context in which the role group membership is being checked",
              "_group": "name of the role group",
              "_objectId": "ID of an object whose parent is being checked for role group membership"
            },
            "returns": {
              "_0": "true if object's parent is a member of this role group, false otherwise"
            }
          },
          "isRoleInGroup(string,string)": {
            "details": "Get whether role is in group.",
            "params": {
              "group": "the group.",
              "role": "the role."
            },
            "returns": {
              "_0": "true if role is in group, false otherwise."
            }
          },
          "isSupportedExternalToken(bytes32)": {
            "params": {
              "_tokenId": "token address converted to bytes32"
            },
            "returns": {
              "_0": "whether token issupported or not"
            }
          },
          "isTokenWrapped(bytes32)": {
            "params": {
              "_entityId": "ID of the entity"
            }
          },
          "lockFunction(bytes4)": {
            "details": "This toggles FunctionLockedStorage.lock to true",
            "params": {
              "functionSelector": "the bytes4 function selector"
            }
          },
          "owner()": {
            "returns": {
              "owner_": "The address of the owner."
            }
          },
          "payDividendFromEntity(bytes32,uint256)": {
            "details": "Transfer dividends to the entity",
            "params": {
              "amount": "the mamount of the dividend token to be distributed to NAYMS token holders.",
              "guid": "Globally unique identifier of a dividend distribution."
            }
          },
          "paySimpleClaim(bytes32,bytes32,bytes32,uint256)": {
            "details": "Pay a claim of `_amount` for simple policy",
            "params": {
              "_amount": "Amount of the claim",
              "_claimId": "Id of the simple policy claim",
              "_insuredId": "Id of the insured party",
              "_policyId": "Id of the simple policy"
            }
          },
          "paySimplePremium(bytes32,uint256)": {
            "details": "Pay a premium of `_amount` on simple policy",
            "params": {
              "_amount": "Amount of the premium",
              "_policyId": "Id of the simple policy"
            }
          },
          "setEntity(bytes32,bytes32)": {
            "details": "Assign the user an entity. The entity must exist in order to associate it with a user.",
            "params": {
              "_entityId": "Unique platform ID of the entity",
              "_userId": "Unique platform ID of the user account"
            }
          },
          "setMaxDividendDenominations(uint8)": {
            "params": {
              "_newMax": "new value to be used."
            }
          },
          "setPolicyCommissionsBasisPoints((uint16,uint16,uint16))": {
            "params": {
              "_policyCommissions": "policy commissions configuration to set"
            }
          },
          "setTradingCommissionsBasisPoints((uint16,uint16,uint16,uint16,uint16))": {
            "params": {
              "_tradingCommissions": "trading commissions configuration to set"
            }
          },
          "startTokenSale(bytes32,uint256,uint256)": {
            "details": "Entity tokens are minted when the sale is started",
            "params": {
              "_amount": "amount of entity tokens to put on sale",
              "_entityId": "ID of the entity",
              "_totalPrice": "total price of the tokens"
            }
          },
          "stringToBytes32(string)": {
            "params": {
              "_strIn": "a string"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
            "params": {
              "interfaceId": "The interface identifier, as specified in ERC-165"
            },
            "returns": {
              "_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
            }
          },
          "totalSupply()": {
            "details": "Get total supply of token.",
            "returns": {
              "_0": "total supply."
            }
          },
          "transferOwnership(address)": {
            "details": "Set _newOwner to address(0) to renounce any ownership.",
            "params": {
              "_newOwner": "The address of the new owner of the contract"
            }
          },
          "unassignRole(bytes32,bytes32)": {
            "details": "Any object ID can be a context, system is a special context with highest priority",
            "params": {
              "_contextId": "ID of the context in which a role membership is being revoked",
              "_objectId": "ID of an object that is being unassigned from a role"
            }
          },
          "unlockFunction(bytes4)": {
            "details": "This toggles FunctionLockedStorage.lock to false",
            "params": {
              "functionSelector": "the bytes4 function selector"
            }
          },
          "updateEntity(bytes32,(bytes32,uint256,uint256,uint256,bool))": {
            "params": {
              "_entity": "metadata of the entity",
              "_entityId": "ID of the entity"
            }
          },
          "updateRoleAssigner(string,string)": {
            "details": "Update who has permission to assign this role",
            "params": {
              "_assignerGroup": "Group who can assign members to this role",
              "_role": "name of the role"
            }
          },
          "updateRoleGroup(string,string,bool)": {
            "details": "Update role group memebership",
            "params": {
              "_group": "name of the group",
              "_role": "name of the role",
              "_roleInGroup": "is member of"
            }
          },
          "updateUpgradeExpiration(uint256)": {
            "details": "When createUpgrade() is called, it allows a diamondCut() upgrade to be executed. This upgrade must be executed before the      upgrade expires. The upgrade expires based on when the upgrade was scheduled (when createUpgrade() was called) + AppStorage.upgradeExpiration.",
            "params": {
              "duration": "The duration until the upgrade expires."
            }
          },
          "withdrawAllDividends(bytes32,bytes32)": {
            "details": "Dividends can be available in more than one dividend denomination. This method will withdraw all available dividends in the different dividend denominations.",
            "params": {
              "ownerId": "Unique ID of the dividend receiver",
              "tokenId": "Unique ID of token"
            }
          },
          "withdrawDividend(bytes32,bytes32,bytes32)": {
            "details": "Transfer dividends to the entity",
            "params": {
              "dividendTokenId": "Unique ID of dividend token",
              "ownerId": "Unique ID of the dividend receiver",
              "tokenId": "Unique ID of token"
            }
          },
          "wrapToken(bytes32)": {
            "params": {
              "_objectId": "ID of the tokenized object"
            }
          },
          "wrapperInternalTransferFrom(bytes32,bytes32,bytes32,uint256)": {
            "details": "Transfer tokens internally between two IDs",
            "params": {
              "from": "token sender",
              "to": "token receiver",
              "tokenId": "Internal ID of the token"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addSupportedExternalToken(address)": {
            "notice": "Add another token to the supported tokens list"
          },
          "assignRole(bytes32,bytes32,string)": {
            "notice": "Assign a `_roleId` to the object in given context"
          },
          "canAssign(bytes32,bytes32,bytes32,string)": {
            "notice": "Check whether a user can assign specific object to the `_role` role in given context"
          },
          "canGroupAssignRole(string,string)": {
            "notice": "Get whether given group can assign given role."
          },
          "cancelOffer(uint256)": {
            "notice": "Cancel offer #`_offerId`. This will cancel the offer so that it's no longer active."
          },
          "cancelUpgrade(bytes32)": {
            "notice": "Cancel the following upgrade hash: `id`"
          },
          "createEntity(bytes32,bytes32,(bytes32,uint256,uint256,uint256,bool),bytes32)": {
            "notice": "Create an entity"
          },
          "createSimplePolicy(bytes32,bytes32,(bytes32[],bytes32[],bytes[]),(uint256,uint256,bytes32,uint256,bool,bool,uint256,uint256,bytes32[],uint256[]),bytes32)": {
            "notice": "Create a Simple Policy"
          },
          "createUpgrade(bytes32)": {
            "notice": "Approve the following upgrade hash: `id`"
          },
          "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
            "notice": "Add/replace/remove any number of functions and optionally execute         a function with delegatecall"
          },
          "enableEntityTokenization(bytes32,string,string)": {
            "notice": "Enable an entity to be tokenized"
          },
          "executeLimitOffer(bytes32,uint256,bytes32,uint256)": {
            "notice": "Execute a limit offer."
          },
          "externalDeposit(address,uint256)": {
            "notice": "Deposit funds into msg.sender's Nayms platform entity"
          },
          "externalWithdrawFromEntity(bytes32,address,address,uint256)": {
            "notice": "Withdraw funds out of Nayms platform"
          },
          "facetAddress(bytes4)": {
            "notice": "Gets the facet that supports the given selector."
          },
          "facetAddresses()": {
            "notice": "Get all the facet addresses used by a diamond."
          },
          "facetFunctionSelectors(address)": {
            "notice": "Gets all the function selectors supported by a specific facet."
          },
          "facets()": {
            "notice": "Gets all facet addresses and their four byte function selectors."
          },
          "getAddressFromExternalTokenId(bytes32)": {
            "notice": "Get the token address from ID of the external token"
          },
          "getBestOfferId(bytes32,bytes32)": {
            "notice": "Get current best offer for given token pair."
          },
          "getEntity(bytes32)": {
            "notice": "Get the entity for the user"
          },
          "getEntityInfo(bytes32)": {
            "notice": "Get the the data for entity with ID: `_entityId`"
          },
          "getLockedBalance(bytes32,bytes32)": {
            "notice": "Get the amount of tokens that an entity has for sale in the marketplace."
          },
          "getMaxDividendDenominations()": {
            "notice": "Get the max dividend denominations value"
          },
          "getPremiumCommissionBasisPoints()": {
            "notice": "Get the policy premium commissions basis points."
          },
          "getRoleInContext(bytes32,bytes32)": {
            "notice": "Get a user's (an objectId's) assigned role in a specific context"
          },
          "getSupportedExternalTokens()": {
            "notice": "Get the supported tokens list as an array"
          },
          "getSystemId()": {
            "notice": "Gets the System context ID."
          },
          "getTradingCommissionsBasisPoints()": {
            "notice": "Get the marketplace's trading commissions basis points."
          },
          "getUpgrade(bytes32)": {
            "notice": "Get the expiry date for provided upgrade hash."
          },
          "getUpgradeExpiration()": {
            "notice": "Get the upgrade expiration period."
          },
          "getUserIdFromAddress(address)": {
            "notice": "Get the platform ID of `addr` account"
          },
          "getWithdrawableDividend(bytes32,bytes32,bytes32)": {
            "notice": "Get withdrawable dividend amount"
          },
          "internalBalanceOf(bytes32,bytes32)": {
            "notice": "Gets balance of an account within platform"
          },
          "internalTokenSupply(bytes32)": {
            "notice": "Current supply for the asset"
          },
          "internalTransferFromEntity(bytes32,bytes32,uint256)": {
            "notice": "Internal transfer of `amount` tokens"
          },
          "isDiamondInitialized()": {
            "notice": "Check if the diamond has been initialized."
          },
          "isFunctionLocked(bytes4)": {
            "notice": "Check if a function has been locked by a system admin"
          },
          "isInGroup(bytes32,bytes32,string)": {
            "notice": "Checks if an object belongs to `_group` group in given context"
          },
          "isObjectTokenizable(bytes32)": {
            "notice": "Check if object can be tokenized"
          },
          "isParentInGroup(bytes32,bytes32,string)": {
            "notice": "Check whether a parent object belongs to the `_group` group in given context"
          },
          "isRoleInGroup(string,string)": {
            "notice": "Get whether role is in group."
          },
          "isSupportedExternalToken(bytes32)": {
            "notice": "Is the specified tokenId an external ERC20 that is supported by the Nayms platform?"
          },
          "isTokenWrapped(bytes32)": {
            "notice": "Check if an entity token is wrapped as ERC20"
          },
          "lockFunction(bytes4)": {
            "notice": "System Admin can lock a function"
          },
          "owner()": {
            "notice": "Get the address of the owner"
          },
          "payDividendFromEntity(bytes32,uint256)": {
            "notice": "Pay `amount` of dividends"
          },
          "setEntity(bytes32,bytes32)": {
            "notice": "Set the entity for the user"
          },
          "setMaxDividendDenominations(uint8)": {
            "notice": "Set `_newMax` as the max dividend denominations value."
          },
          "setPolicyCommissionsBasisPoints((uint16,uint16,uint16))": {
            "notice": "Update policy commission basis points configuration."
          },
          "setTradingCommissionsBasisPoints((uint16,uint16,uint16,uint16,uint16))": {
            "notice": "Update trading commission basis points configuration."
          },
          "startTokenSale(bytes32,uint256,uint256)": {
            "notice": "Start token sale of `_amount` tokens for total price of `_totalPrice`"
          },
          "stringToBytes32(string)": {
            "notice": "Convert a string type to a bytes32 type"
          },
          "supportsInterface(bytes4)": {
            "notice": "Query if a contract implements an interface"
          },
          "transferOwnership(address)": {
            "notice": "Set the address of the new owner of the contract"
          },
          "unassignRole(bytes32,bytes32)": {
            "notice": "Unassign object from a role in given context"
          },
          "unlockFunction(bytes4)": {
            "notice": "System Admin can unlock a function"
          },
          "updateEntity(bytes32,(bytes32,uint256,uint256,uint256,bool))": {
            "notice": "Update entity metadata"
          },
          "updateRoleAssigner(string,string)": {
            "notice": "Update who can assign `_role` role"
          },
          "updateRoleGroup(string,string,bool)": {
            "notice": "Update role group memebership for `_role` role and `_group` group"
          },
          "updateUpgradeExpiration(uint256)": {
            "notice": "Update the diamond cut upgrade expiration period."
          },
          "withdrawAllDividends(bytes32,bytes32)": {
            "notice": "Withdraws a user's available dividends."
          },
          "withdrawDividend(bytes32,bytes32,bytes32)": {
            "notice": "Withdraw available dividend"
          },
          "wrapToken(bytes32)": {
            "notice": "Wrap an object token as ERC20"
          },
          "wrapperInternalTransferFrom(bytes32,bytes32,bytes32,uint256)": {
            "notice": "Internal transfer of `amount` tokens `from` -> `to`"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/ozv4/",
        ":@uniswap/lib/=lib/solidity-lib/",
        ":@uniswap/v2-core/=lib/v2-core/",
        ":@uniswap/v3-core/=lib/v3-core/",
        ":@uniswap/v3-periphery/=lib/v3-periphery/",
        ":base64-sol/=lib/base64/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":ozv4/=lib/ozv4/",
        ":script/=script/",
        ":solidity-lib/=lib/solidity-lib/contracts/",
        ":solidity-stringutils/=lib/solidity-stringutils/src/",
        ":solmate/=lib/solmate/src/",
        ":src/=src/",
        ":test/=test/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/diamonds/nayms/INayms.sol": "INayms"
      },
      "libraries": {}
    },
    "sources": {
      "src/diamonds/nayms/INayms.sol": {
        "keccak256": "0x5e4923ab77351098cd809238e56b71e940514730e652520aa85ae0deec4bdadd",
        "urls": [
          "bzz-raw://befcf0b889c99292d49a724d4b59d61fd52e1fd7cbb4f8ed64d6fc6a2c732ed1",
          "dweb:/ipfs/QmecX5Mfx8mDWLn4axucUHSG6MBD7h9cFho2x1QHLx2umi"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/FreeStructs.sol": {
        "keccak256": "0xbcbdb86f63372f83a5014433874e8ae486ac5d219889203393e63337b4f3a384",
        "urls": [
          "bzz-raw://0538c135fa5950fbd362427f5d2c3d4a15e568bd84a151e6446bca72c1a955a4",
          "dweb:/ipfs/QmQC4uX42LXPBD5nSHzSg7cf4pU8GqxQrAmoTkoGUgAzRD"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/IACLFacet.sol": {
        "keccak256": "0xd72d59aa31c0834a96493e2a896bc9ee2963f906ab5c907184aeb1e7b8263176",
        "urls": [
          "bzz-raw://e55525f0117636d55524b0f56513c4c14e5d533994fbf303d05813ba27705931",
          "dweb:/ipfs/QmXiUgcRkULmBTeSXDv96sb584H9eQNX3wqN88qUVUBFdh"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/IAdminFacet.sol": {
        "keccak256": "0xe7008511e360617181eeec1ecf76743bf9253501962c84a4931a72eb65aa1a1b",
        "urls": [
          "bzz-raw://4b3c7852635cda5c013408accfe40646a6180bfbd74ee77f9928167e4754b631",
          "dweb:/ipfs/QmTwYLEXEiWZzVooS1SAtev2GfSfKTdqoTGL8uXQeojyJa"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/IEntityFacet.sol": {
        "keccak256": "0xce32aa04ea48b38030d2b8650d0989b37cde6e48bcbbb133ff8e7e7ffd0f78e4",
        "urls": [
          "bzz-raw://c970eb23c90a71386c7524abf0faca59dada315598df56826312ef15065556f5",
          "dweb:/ipfs/QmZCxwYYyPQyKgrpR7cqKWSw8aCbDHCYCi4JZUVdkKrQRY"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/IGovernanceFacet.sol": {
        "keccak256": "0x521a78755df804dc302abec66a068c8529c7976893f7b5e9de6d8b5f463044bf",
        "urls": [
          "bzz-raw://c7d94ca1e30c4302f6125b97306a29ee6bf1a141acb8447fbdd18630f342c666",
          "dweb:/ipfs/QmZZRkAVWLhXMbc31m5e3MZJVZ7JUKiXAnNDBm5Ap7isaN"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/IMarketFacet.sol": {
        "keccak256": "0xf5bd6475cc57cf8e6b1b4517cfd3e1ccdeea590ba398a0a828c9a02bfd7ce047",
        "urls": [
          "bzz-raw://d5beace8be7754de703ded6d95f04a6d75a291d993a0afa7a6f3addebb8769f2",
          "dweb:/ipfs/QmULQVQQQro6YxQE6SF6TKS2G3BhXuzyJKyGXZrKR3LXNH"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/INaymsTokenFacet.sol": {
        "keccak256": "0xfdd01e5e0cd4dfea9196a3fa6dca3d277e394c7e1f6ea972e12620e04dcfd6aa",
        "urls": [
          "bzz-raw://850e6bfc293916409884dcd223a8afba6cf8c1fd545935e5eb40cbe64fd79039",
          "dweb:/ipfs/QmYtHEdHZbQfrxkD417EcJbwe1tiCpLRWE2Rgm7yJTQ3UG"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/ISimplePolicyFacet.sol": {
        "keccak256": "0xa19aacc7591f778a17b6238212567584d4f261dd035ea1a5430cc4acde135b9c",
        "urls": [
          "bzz-raw://796c08003a00a8fac916d3dd60f753b7eac13f0bcf063af738045008684d9369",
          "dweb:/ipfs/QmVntDBDnY7xXKVDh1hniz84v8XHcrXf8tm4pgANAnH7Ts"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/ISystemFacet.sol": {
        "keccak256": "0x3fbb24b05dd3e2dbfe8541af0dc9f175e562a77fcdc549848b170b9b14462f45",
        "urls": [
          "bzz-raw://c626e5e5487847d9c8931f7fcab85b483164714704261432418dfac239311452",
          "dweb:/ipfs/QmTWqLGW2EoJ2oZJx8LjUbAfu4WHnv4A6uYAWdxEuQ89c5"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/ITokenizedVaultFacet.sol": {
        "keccak256": "0x02a9fc017690a2fd1424a67f2ecae15cd741fc381e3c755d141ca5dbfb78f368",
        "urls": [
          "bzz-raw://2e654d4947bfddda09340711ac961871527ba9587d300100036604b97d9668e7",
          "dweb:/ipfs/QmUg32HGvV17CHwu2tThPpVrojQwhuXEnfFe2WFwvqkqzF"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/ITokenizedVaultIOFacet.sol": {
        "keccak256": "0x6e524d2ab08929f2d31c1f1dd3c5c6c3f3317b80f22c8536b4ba7421369b1f87",
        "urls": [
          "bzz-raw://646c0316fce39694cf11b020aa0b28496f31f2925cc31e795793977ac363fa12",
          "dweb:/ipfs/QmT9C9Ee5UuqzF9V6Rv7heJvoLGKXrd3KjYDQnzDyEVZs6"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/IUserFacet.sol": {
        "keccak256": "0x3b7ed45fc97adf42268310737d3a5f2c07e9fa4d6105efbc3d16363c0ce4a839",
        "urls": [
          "bzz-raw://e996ea5a861ab4bd5da3a0e9bd4d0824cd12cdc21bc9563feb0ae24a0ae0e9bc",
          "dweb:/ipfs/Qmcaqi2NdUM8SJAupkznNQ3ey2DUE5JhXa7frG6AH3kw5o"
        ],
        "license": "MIT"
      },
      "src/diamonds/shared/interfaces/IDiamondCut.sol": {
        "keccak256": "0x9f5fae94fa7eb7878762079d230687bd7184c60a0f1fdddf9775742bd5c495f1",
        "urls": [
          "bzz-raw://8fd5f10ef1d46dc0c902fd83de013dc5fef5e144b168bfa9a418d6598bb1eb4b",
          "dweb:/ipfs/QmVgzifBPGZxxfwt2CuQMpVEdEmQWZNwpaJ2Nwfx3cvpn3"
        ],
        "license": "MIT"
      },
      "src/diamonds/shared/interfaces/IDiamondLoupe.sol": {
        "keccak256": "0x27ca2115c56b2f09b4b4e24dc023e1d2ec0d6e1c603bdb30929d5bbda411cee0",
        "urls": [
          "bzz-raw://0bc3bd5ac85edff564ecbe8896cf8be85a656f141c25c9705f02fad717cb6f9c",
          "dweb:/ipfs/QmYnQYgFapFvm7zwZMFFfGnERyd37mfVqHx8aT3HcCTDg2"
        ],
        "license": "MIT"
      },
      "src/diamonds/shared/interfaces/IERC165.sol": {
        "keccak256": "0x13c14966128e5d95c060726fdfe204873e97df95d8092b65532e84d28bbeb6a4",
        "urls": [
          "bzz-raw://182cd2a57a4973dfe33b602219f92f46d8b5c93c2447c29299472740f4f39d9e",
          "dweb:/ipfs/QmTudnwW2V64G5FhetwDwmYTi7AaoFeksEXfV9Eq2SbDpc"
        ],
        "license": "MIT"
      },
      "src/diamonds/shared/interfaces/IERC173.sol": {
        "keccak256": "0xfa7177a2353c17ceef7fb133fb547c7ce4fb9ad17f8fdcaca754fcec9c10f871",
        "urls": [
          "bzz-raw://bd9f221cf880daa211ca7d9697a35de3a92311b1853048a9a62d49567cda947b",
          "dweb:/ipfs/QmWyV5Np2Dfxxs9PfoGGC24YJ1KsHBhP9ijsGrwQ5DpJ3Z"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/diamonds/nayms/INayms.sol",
    "id": 38414,
    "exportedSymbols": {
      "IACLFacet": [
        41430
      ],
      "IAdminFacet": [
        41521
      ],
      "IDiamondCut": [
        50383
      ],
      "IDiamondLoupe": [
        50424
      ],
      "IERC165": [
        50435
      ],
      "IERC173": [
        50458
      ],
      "IEntityFacet": [
        41605
      ],
      "IGovernanceFacet": [
        41646
      ],
      "IMarketFacet": [
        41727
      ],
      "INayms": [
        38413
      ],
      "INaymsTokenFacet": [
        41745
      ],
      "ISimplePolicyFacet": [
        41817
      ],
      "ISystemFacet": [
        41874
      ],
      "ITokenizedVaultFacet": [
        41974
      ],
      "ITokenizedVaultIOFacet": [
        41998
      ],
      "IUserFacet": [
        42034
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1504:39",
    "nodes": [
      {
        "id": 38351,
        "nodeType": "PragmaDirective",
        "src": "32:23:39",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 38353,
        "nodeType": "ImportDirective",
        "src": "93:67:39",
        "nodes": [],
        "absolutePath": "src/diamonds/shared/interfaces/IDiamondCut.sol",
        "file": "../shared/interfaces/IDiamondCut.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 50384,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38352,
              "name": "IDiamondCut",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 50383,
              "src": "102:11:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38355,
        "nodeType": "ImportDirective",
        "src": "161:71:39",
        "nodes": [],
        "absolutePath": "src/diamonds/shared/interfaces/IDiamondLoupe.sol",
        "file": "../shared/interfaces/IDiamondLoupe.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 50425,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38354,
              "name": "IDiamondLoupe",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 50424,
              "src": "170:13:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38357,
        "nodeType": "ImportDirective",
        "src": "233:59:39",
        "nodes": [],
        "absolutePath": "src/diamonds/shared/interfaces/IERC165.sol",
        "file": "../shared/interfaces/IERC165.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 50436,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38356,
              "name": "IERC165",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 50435,
              "src": "242:7:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38359,
        "nodeType": "ImportDirective",
        "src": "293:59:39",
        "nodes": [],
        "absolutePath": "src/diamonds/shared/interfaces/IERC173.sol",
        "file": "../shared/interfaces/IERC173.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 50459,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38358,
              "name": "IERC173",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 50458,
              "src": "302:7:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38361,
        "nodeType": "ImportDirective",
        "src": "354:55:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/IACLFacet.sol",
        "file": "./interfaces/IACLFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41431,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38360,
              "name": "IACLFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41430,
              "src": "363:9:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38363,
        "nodeType": "ImportDirective",
        "src": "410:57:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/IUserFacet.sol",
        "file": "./interfaces/IUserFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 42035,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38362,
              "name": "IUserFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 42034,
              "src": "419:10:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38365,
        "nodeType": "ImportDirective",
        "src": "468:59:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/IAdminFacet.sol",
        "file": "./interfaces/IAdminFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41522,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38364,
              "name": "IAdminFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41521,
              "src": "477:11:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38367,
        "nodeType": "ImportDirective",
        "src": "528:61:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/ISystemFacet.sol",
        "file": "./interfaces/ISystemFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41875,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38366,
              "name": "ISystemFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41874,
              "src": "537:12:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38369,
        "nodeType": "ImportDirective",
        "src": "590:69:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/INaymsTokenFacet.sol",
        "file": "./interfaces/INaymsTokenFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41746,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38368,
              "name": "INaymsTokenFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41745,
              "src": "599:16:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38371,
        "nodeType": "ImportDirective",
        "src": "660:77:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/ITokenizedVaultFacet.sol",
        "file": "./interfaces/ITokenizedVaultFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41975,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38370,
              "name": "ITokenizedVaultFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41974,
              "src": "669:20:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38373,
        "nodeType": "ImportDirective",
        "src": "738:81:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/ITokenizedVaultIOFacet.sol",
        "file": "./interfaces/ITokenizedVaultIOFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41999,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38372,
              "name": "ITokenizedVaultIOFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41998,
              "src": "747:22:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38375,
        "nodeType": "ImportDirective",
        "src": "820:61:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/IMarketFacet.sol",
        "file": "./interfaces/IMarketFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41728,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38374,
              "name": "IMarketFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41727,
              "src": "829:12:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38377,
        "nodeType": "ImportDirective",
        "src": "882:61:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/IEntityFacet.sol",
        "file": "./interfaces/IEntityFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41606,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38376,
              "name": "IEntityFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41605,
              "src": "891:12:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38379,
        "nodeType": "ImportDirective",
        "src": "944:73:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/ISimplePolicyFacet.sol",
        "file": "./interfaces/ISimplePolicyFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41818,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38378,
              "name": "ISimplePolicyFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41817,
              "src": "953:18:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38381,
        "nodeType": "ImportDirective",
        "src": "1018:69:39",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/IGovernanceFacet.sol",
        "file": "./interfaces/IGovernanceFacet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 38414,
        "sourceUnit": 41647,
        "symbolAliases": [
          {
            "foreign": {
              "id": 38380,
              "name": "IGovernanceFacet",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41646,
              "src": "1027:16:39",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 38413,
        "nodeType": "ContractDefinition",
        "src": "1226:309:39",
        "nodes": [],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 38383,
              "name": "IDiamondCut",
              "nameLocations": [
                "1250:11:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 50383,
              "src": "1250:11:39"
            },
            "id": 38384,
            "nodeType": "InheritanceSpecifier",
            "src": "1250:11:39"
          },
          {
            "baseName": {
              "id": 38385,
              "name": "IDiamondLoupe",
              "nameLocations": [
                "1267:13:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 50424,
              "src": "1267:13:39"
            },
            "id": 38386,
            "nodeType": "InheritanceSpecifier",
            "src": "1267:13:39"
          },
          {
            "baseName": {
              "id": 38387,
              "name": "IERC165",
              "nameLocations": [
                "1286:7:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 50435,
              "src": "1286:7:39"
            },
            "id": 38388,
            "nodeType": "InheritanceSpecifier",
            "src": "1286:7:39"
          },
          {
            "baseName": {
              "id": 38389,
              "name": "IERC173",
              "nameLocations": [
                "1299:7:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 50458,
              "src": "1299:7:39"
            },
            "id": 38390,
            "nodeType": "InheritanceSpecifier",
            "src": "1299:7:39"
          },
          {
            "baseName": {
              "id": 38391,
              "name": "IACLFacet",
              "nameLocations": [
                "1312:9:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41430,
              "src": "1312:9:39"
            },
            "id": 38392,
            "nodeType": "InheritanceSpecifier",
            "src": "1312:9:39"
          },
          {
            "baseName": {
              "id": 38393,
              "name": "IAdminFacet",
              "nameLocations": [
                "1327:11:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41521,
              "src": "1327:11:39"
            },
            "id": 38394,
            "nodeType": "InheritanceSpecifier",
            "src": "1327:11:39"
          },
          {
            "baseName": {
              "id": 38395,
              "name": "IUserFacet",
              "nameLocations": [
                "1344:10:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 42034,
              "src": "1344:10:39"
            },
            "id": 38396,
            "nodeType": "InheritanceSpecifier",
            "src": "1344:10:39"
          },
          {
            "baseName": {
              "id": 38397,
              "name": "ISystemFacet",
              "nameLocations": [
                "1360:12:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41874,
              "src": "1360:12:39"
            },
            "id": 38398,
            "nodeType": "InheritanceSpecifier",
            "src": "1360:12:39"
          },
          {
            "baseName": {
              "id": 38399,
              "name": "INaymsTokenFacet",
              "nameLocations": [
                "1378:16:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41745,
              "src": "1378:16:39"
            },
            "id": 38400,
            "nodeType": "InheritanceSpecifier",
            "src": "1378:16:39"
          },
          {
            "baseName": {
              "id": 38401,
              "name": "ITokenizedVaultFacet",
              "nameLocations": [
                "1400:20:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41974,
              "src": "1400:20:39"
            },
            "id": 38402,
            "nodeType": "InheritanceSpecifier",
            "src": "1400:20:39"
          },
          {
            "baseName": {
              "id": 38403,
              "name": "ITokenizedVaultIOFacet",
              "nameLocations": [
                "1426:22:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41998,
              "src": "1426:22:39"
            },
            "id": 38404,
            "nodeType": "InheritanceSpecifier",
            "src": "1426:22:39"
          },
          {
            "baseName": {
              "id": 38405,
              "name": "IMarketFacet",
              "nameLocations": [
                "1454:12:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41727,
              "src": "1454:12:39"
            },
            "id": 38406,
            "nodeType": "InheritanceSpecifier",
            "src": "1454:12:39"
          },
          {
            "baseName": {
              "id": 38407,
              "name": "IEntityFacet",
              "nameLocations": [
                "1472:12:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41605,
              "src": "1472:12:39"
            },
            "id": 38408,
            "nodeType": "InheritanceSpecifier",
            "src": "1472:12:39"
          },
          {
            "baseName": {
              "id": 38409,
              "name": "ISimplePolicyFacet",
              "nameLocations": [
                "1490:18:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41817,
              "src": "1490:18:39"
            },
            "id": 38410,
            "nodeType": "InheritanceSpecifier",
            "src": "1490:18:39"
          },
          {
            "baseName": {
              "id": 38411,
              "name": "IGovernanceFacet",
              "nameLocations": [
                "1514:16:39"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41646,
              "src": "1514:16:39"
            },
            "id": 38412,
            "nodeType": "InheritanceSpecifier",
            "src": "1514:16:39"
          }
        ],
        "canonicalName": "INayms",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 38382,
          "nodeType": "StructuredDocumentation",
          "src": "1089:136:39",
          "text": " @title Nayms Diamond\n @notice Everything is a part of one big diamond.\n @dev Every facet should be cut into this diamond."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          38413,
          41646,
          41817,
          41605,
          41727,
          41998,
          41974,
          41745,
          41874,
          42034,
          41521,
          41430,
          50458,
          50435,
          50424,
          50383
        ],
        "name": "INayms",
        "nameLocation": "1236:6:39",
        "scope": 38414,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 39
}