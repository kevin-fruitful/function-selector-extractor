{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateTradingCommissions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "roughCommissionPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionNaymsLtd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionNDF",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionSTM",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "commissionMaker",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCommissions",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCommissions",
          "name": "tc",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offerId",
          "type": "uint256"
        }
      ],
      "name": "cancelOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sellToken",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_sellAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_buyToken",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_buyAmount",
          "type": "uint256"
        }
      ],
      "name": "executeLimitOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyTokenCommissionsPaid_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellTokenCommissionsPaid_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_sellToken",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_buyToken",
          "type": "bytes32"
        }
      ],
      "name": "getBestOfferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastOfferId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offerId",
          "type": "uint256"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "creator",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "sellToken",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellAmountInitial",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "buyToken",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyAmountInitial",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeSchedule",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "state",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rankNext",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rankPrev",
              "type": "uint256"
            }
          ],
          "internalType": "struct MarketInfo",
          "name": "_offerState",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTradingCommissionsBasisPoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "tradingCommissionTotalBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionNaymsLtdBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionNDFBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionSTMBP",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "tradingCommissionMakerBP",
              "type": "uint16"
            }
          ],
          "internalType": "struct TradingCommissionsBasisPoints",
          "name": "bp",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_offerId",
          "type": "uint256"
        }
      ],
      "name": "isActiveOffer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "calculateTradingCommissions(uint256)": "eb3f5926",
    "cancelOffer(uint256)": "ef706adf",
    "executeLimitOffer(bytes32,uint256,bytes32,uint256)": "9df00480",
    "getBestOfferId(bytes32,bytes32)": "4c8198dc",
    "getLastOfferId()": "59e148fc",
    "getOffer(uint256)": "4579268a",
    "getTradingCommissionsBasisPoints()": "ed7364ae",
    "isActiveOffer(uint256)": "8d81a1d3"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"calculateTradingCommissions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"roughCommissionPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionNaymsLtd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionNDF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionSTM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionMaker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCommissions\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCommissions\",\"name\":\"tc\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sellToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_buyToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_buyAmount\",\"type\":\"uint256\"}],\"name\":\"executeLimitOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTokenCommissionsPaid_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTokenCommissionsPaid_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_sellToken\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_buyToken\",\"type\":\"bytes32\"}],\"name\":\"getBestOfferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastOfferId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"creator\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sellToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAmountInitial\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"buyToken\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmountInitial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSchedule\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rankNext\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rankPrev\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketInfo\",\"name\":\"_offerState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTradingCommissionsBasisPoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"tradingCommissionTotalBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionNaymsLtdBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionNDFBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionSTMBP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradingCommissionMakerBP\",\"type\":\"uint16\"}],\"internalType\":\"struct TradingCommissionsBasisPoints\",\"name\":\"bp\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"isActiveOffer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This should only be called through an entity, never directly by an EOA\",\"kind\":\"dev\",\"methods\":{\"calculateTradingCommissions(uint256)\":{\"details\":\"Calculate the trading commissions based on a buy amount.\",\"params\":{\"buyAmount\":\"The amount that the commissions payments are calculated from.\"},\"returns\":{\"tc\":\"TradingCommissions struct with metadata regarding the trade commission payment amounts.\"}},\"cancelOffer(uint256)\":{\"details\":\"This function can be frontrun: In the scenario where a user wants to cancel an unfavorable market offer, an attacker can potentially monitor and identify       that the user has called this method, determine that filling this market offer is profitable, and as a result call executeLimitOffer with a higher gas price to have       their transaction filled before the user can have cancelOffer filled. The most ideal situation for the user is to not have placed the unfavorable market offer       in the first place since an attacker can always monitor our marketplace and potentially identify profitable market offers. Our UI will aide users in not placing       market offers that are obviously unfavorable to the user and/or seem like mistake orders. In the event that a user needs to cancel an offer, it is recommended to       use Flashbots in order to privately send your transaction so an attack cannot be triggered from monitoring the mempool for calls to cancelOffer. A user is recommended       to change their RPC endpoint to point to https://rpc.flashbots.net when calling cancelOffer. We will add additional documentation to aide our users in this process.       More information on using Flashbots: https://docs.flashbots.net/flashbots-protect/rpc/quick-start/\",\"params\":{\"_offerId\":\"offer ID\"}},\"executeLimitOffer(bytes32,uint256,bytes32,uint256)\":{\"params\":{\"_buyAmount\":\"Amount to buy.\",\"_buyToken\":\"Token to buy.\",\"_sellAmount\":\"Amount to sell.\",\"_sellToken\":\"Token to sell.\"},\"returns\":{\"buyTokenCommissionsPaid_\":\"The amount of the buy token paid as commissions on this particular order.\",\"offerId_\":\"returns >0 if a limit offer was created on the market because the offer couldn't be totally fulfilled immediately. In this case the return value is the created offer's id.\",\"sellTokenCommissionsPaid_\":\"The amount of the sell token paid as commissions on this particular order.\"}},\"getBestOfferId(bytes32,bytes32)\":{\"details\":\"This means finding the highest sellToken-per-buyToken price, i.e. price = sellToken / buyToken\",\"returns\":{\"_0\":\"offerId, or 0 if no current best is available.\"}},\"getLastOfferId()\":{\"details\":\"Get last created offer.\",\"returns\":{\"_0\":\"offer id.\"}},\"getOffer(uint256)\":{\"details\":\"Get the details of the offer #`_offerId`\",\"params\":{\"_offerId\":\"ID of a particular offer\"},\"returns\":{\"_offerState\":\"details of the offer\"}},\"getTradingCommissionsBasisPoints()\":{\"returns\":{\"bp\":\"- TradingCommissionsBasisPoints struct containing the individual basis points set for each marketplace commission receiver.\"}},\"isActiveOffer(uint256)\":{\"details\":\"Check if the offer #`_offerId` is active or not.\",\"params\":{\"_offerId\":\"ID of a particular offer\"},\"returns\":{\"_0\":\"active or not\"}}},\"title\":\"Matching Market (inspired by MakerOTC: https://github.com/nayms/maker-otc/blob/master/contracts/matching_market.sol)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelOffer(uint256)\":{\"notice\":\"Cancel offer #`_offerId`. This will cancel the offer so that it's no longer active.\"},\"executeLimitOffer(bytes32,uint256,bytes32,uint256)\":{\"notice\":\"Execute a limit offer.\"},\"getBestOfferId(bytes32,bytes32)\":{\"notice\":\"Get current best offer for given token pair.\"},\"getTradingCommissionsBasisPoints()\":{\"notice\":\"Get the marketplace's trading commissions basis points.\"}},\"notice\":\"Trade entity tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/diamonds/nayms/interfaces/IMarketFacet.sol\":\"IMarketFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/ozv4/\",\":@uniswap/lib/=lib/solidity-lib/\",\":@uniswap/v2-core/=lib/v2-core/\",\":@uniswap/v3-core/=lib/v3-core/\",\":@uniswap/v3-periphery/=lib/v3-periphery/\",\":base64-sol/=lib/base64/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":ozv4/=lib/ozv4/\",\":script/=script/\",\":solidity-lib/=lib/solidity-lib/contracts/\",\":solidity-stringutils/=lib/solidity-stringutils/src/\",\":solmate/=lib/solmate/src/\",\":src/=src/\",\":test/=test/\"]},\"sources\":{\"src/diamonds/nayms/interfaces/FreeStructs.sol\":{\"keccak256\":\"0xbcbdb86f63372f83a5014433874e8ae486ac5d219889203393e63337b4f3a384\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0538c135fa5950fbd362427f5d2c3d4a15e568bd84a151e6446bca72c1a955a4\",\"dweb:/ipfs/QmQC4uX42LXPBD5nSHzSg7cf4pU8GqxQrAmoTkoGUgAzRD\"]},\"src/diamonds/nayms/interfaces/IMarketFacet.sol\":{\"keccak256\":\"0xf5bd6475cc57cf8e6b1b4517cfd3e1ccdeea590ba398a0a828c9a02bfd7ce047\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5beace8be7754de703ded6d95f04a6d75a291d993a0afa7a6f3addebb8769f2\",\"dweb:/ipfs/QmULQVQQQro6YxQE6SF6TKS2G3BhXuzyJKyGXZrKR3LXNH\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "buyAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calculateTradingCommissions",
          "outputs": [
            {
              "internalType": "struct TradingCommissions",
              "name": "tc",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "roughCommissionPaid",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "commissionNaymsLtd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "commissionNDF",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "commissionSTM",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "commissionMaker",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalCommissions",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_offerId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancelOffer"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_sellToken",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_sellAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "_buyToken",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_buyAmount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "executeLimitOffer",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "offerId_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyTokenCommissionsPaid_",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellTokenCommissionsPaid_",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_sellToken",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_buyToken",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBestOfferId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getLastOfferId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_offerId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOffer",
          "outputs": [
            {
              "internalType": "struct MarketInfo",
              "name": "_offerState",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "creator",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "sellToken",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sellAmountInitial",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "buyToken",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "buyAmountInitial",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feeSchedule",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "state",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rankNext",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rankPrev",
                  "type": "uint256"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getTradingCommissionsBasisPoints",
          "outputs": [
            {
              "internalType": "struct TradingCommissionsBasisPoints",
              "name": "bp",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionTotalBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionNaymsLtdBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionNDFBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionSTMBP",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "tradingCommissionMakerBP",
                  "type": "uint16"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_offerId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isActiveOffer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "calculateTradingCommissions(uint256)": {
            "details": "Calculate the trading commissions based on a buy amount.",
            "params": {
              "buyAmount": "The amount that the commissions payments are calculated from."
            },
            "returns": {
              "tc": "TradingCommissions struct with metadata regarding the trade commission payment amounts."
            }
          },
          "cancelOffer(uint256)": {
            "details": "This function can be frontrun: In the scenario where a user wants to cancel an unfavorable market offer, an attacker can potentially monitor and identify       that the user has called this method, determine that filling this market offer is profitable, and as a result call executeLimitOffer with a higher gas price to have       their transaction filled before the user can have cancelOffer filled. The most ideal situation for the user is to not have placed the unfavorable market offer       in the first place since an attacker can always monitor our marketplace and potentially identify profitable market offers. Our UI will aide users in not placing       market offers that are obviously unfavorable to the user and/or seem like mistake orders. In the event that a user needs to cancel an offer, it is recommended to       use Flashbots in order to privately send your transaction so an attack cannot be triggered from monitoring the mempool for calls to cancelOffer. A user is recommended       to change their RPC endpoint to point to https://rpc.flashbots.net when calling cancelOffer. We will add additional documentation to aide our users in this process.       More information on using Flashbots: https://docs.flashbots.net/flashbots-protect/rpc/quick-start/",
            "params": {
              "_offerId": "offer ID"
            }
          },
          "executeLimitOffer(bytes32,uint256,bytes32,uint256)": {
            "params": {
              "_buyAmount": "Amount to buy.",
              "_buyToken": "Token to buy.",
              "_sellAmount": "Amount to sell.",
              "_sellToken": "Token to sell."
            },
            "returns": {
              "buyTokenCommissionsPaid_": "The amount of the buy token paid as commissions on this particular order.",
              "offerId_": "returns >0 if a limit offer was created on the market because the offer couldn't be totally fulfilled immediately. In this case the return value is the created offer's id.",
              "sellTokenCommissionsPaid_": "The amount of the sell token paid as commissions on this particular order."
            }
          },
          "getBestOfferId(bytes32,bytes32)": {
            "details": "This means finding the highest sellToken-per-buyToken price, i.e. price = sellToken / buyToken",
            "returns": {
              "_0": "offerId, or 0 if no current best is available."
            }
          },
          "getLastOfferId()": {
            "details": "Get last created offer.",
            "returns": {
              "_0": "offer id."
            }
          },
          "getOffer(uint256)": {
            "details": "Get the details of the offer #`_offerId`",
            "params": {
              "_offerId": "ID of a particular offer"
            },
            "returns": {
              "_offerState": "details of the offer"
            }
          },
          "getTradingCommissionsBasisPoints()": {
            "returns": {
              "bp": "- TradingCommissionsBasisPoints struct containing the individual basis points set for each marketplace commission receiver."
            }
          },
          "isActiveOffer(uint256)": {
            "details": "Check if the offer #`_offerId` is active or not.",
            "params": {
              "_offerId": "ID of a particular offer"
            },
            "returns": {
              "_0": "active or not"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "cancelOffer(uint256)": {
            "notice": "Cancel offer #`_offerId`. This will cancel the offer so that it's no longer active."
          },
          "executeLimitOffer(bytes32,uint256,bytes32,uint256)": {
            "notice": "Execute a limit offer."
          },
          "getBestOfferId(bytes32,bytes32)": {
            "notice": "Get current best offer for given token pair."
          },
          "getTradingCommissionsBasisPoints()": {
            "notice": "Get the marketplace's trading commissions basis points."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/ozv4/",
        ":@uniswap/lib/=lib/solidity-lib/",
        ":@uniswap/v2-core/=lib/v2-core/",
        ":@uniswap/v3-core/=lib/v3-core/",
        ":@uniswap/v3-periphery/=lib/v3-periphery/",
        ":base64-sol/=lib/base64/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":ozv4/=lib/ozv4/",
        ":script/=script/",
        ":solidity-lib/=lib/solidity-lib/contracts/",
        ":solidity-stringutils/=lib/solidity-stringutils/src/",
        ":solmate/=lib/solmate/src/",
        ":src/=src/",
        ":test/=test/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/diamonds/nayms/interfaces/IMarketFacet.sol": "IMarketFacet"
      },
      "libraries": {}
    },
    "sources": {
      "src/diamonds/nayms/interfaces/FreeStructs.sol": {
        "keccak256": "0xbcbdb86f63372f83a5014433874e8ae486ac5d219889203393e63337b4f3a384",
        "urls": [
          "bzz-raw://0538c135fa5950fbd362427f5d2c3d4a15e568bd84a151e6446bca72c1a955a4",
          "dweb:/ipfs/QmQC4uX42LXPBD5nSHzSg7cf4pU8GqxQrAmoTkoGUgAzRD"
        ],
        "license": "MIT"
      },
      "src/diamonds/nayms/interfaces/IMarketFacet.sol": {
        "keccak256": "0xf5bd6475cc57cf8e6b1b4517cfd3e1ccdeea590ba398a0a828c9a02bfd7ce047",
        "urls": [
          "bzz-raw://d5beace8be7754de703ded6d95f04a6d75a291d993a0afa7a6f3addebb8769f2",
          "dweb:/ipfs/QmULQVQQQro6YxQE6SF6TKS2G3BhXuzyJKyGXZrKR3LXNH"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/diamonds/nayms/interfaces/IMarketFacet.sol",
    "id": 41728,
    "exportedSymbols": {
      "IMarketFacet": [
        41727
      ],
      "MarketInfo": [
        41197
      ],
      "TradingCommissions": [
        41311
      ],
      "TradingCommissionsBasisPoints": [
        41322
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:4645:60",
    "nodes": [
      {
        "id": 41648,
        "nodeType": "PragmaDirective",
        "src": "32:23:60",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 41652,
        "nodeType": "ImportDirective",
        "src": "57:98:60",
        "nodes": [],
        "absolutePath": "src/diamonds/nayms/interfaces/FreeStructs.sol",
        "file": "./FreeStructs.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 41728,
        "sourceUnit": 41323,
        "symbolAliases": [
          {
            "foreign": {
              "id": 41649,
              "name": "MarketInfo",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41197,
              "src": "66:10:60",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 41650,
              "name": "TradingCommissions",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41311,
              "src": "78:18:60",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 41651,
              "name": "TradingCommissionsBasisPoints",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 41322,
              "src": "98:29:60",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 41727,
        "nodeType": "ContractDefinition",
        "src": "402:4274:60",
        "nodes": [
          {
            "id": 41671,
            "nodeType": "FunctionDefinition",
            "src": "1078:312:60",
            "nodes": [],
            "documentation": {
              "id": 41654,
              "nodeType": "StructuredDocumentation",
              "src": "431:642:60",
              "text": " @notice Execute a limit offer.\n @param _sellToken Token to sell.\n @param _sellAmount Amount to sell.\n @param _buyToken Token to buy.\n @param _buyAmount Amount to buy.\n @return offerId_ returns >0 if a limit offer was created on the market because the offer couldn't be totally fulfilled immediately. In this case the return value is the created offer's id.\n @return buyTokenCommissionsPaid_ The amount of the buy token paid as commissions on this particular order.\n @return sellTokenCommissionsPaid_ The amount of the sell token paid as commissions on this particular order."
            },
            "functionSelector": "9df00480",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "executeLimitOffer",
            "nameLocation": "1087:17:60",
            "parameters": {
              "id": 41663,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41656,
                  "mutability": "mutable",
                  "name": "_sellToken",
                  "nameLocation": "1122:10:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41671,
                  "src": "1114:18:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 41655,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1114:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41658,
                  "mutability": "mutable",
                  "name": "_sellAmount",
                  "nameLocation": "1150:11:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41671,
                  "src": "1142:19:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41657,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1142:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41660,
                  "mutability": "mutable",
                  "name": "_buyToken",
                  "nameLocation": "1179:9:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41671,
                  "src": "1171:17:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 41659,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1171:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41662,
                  "mutability": "mutable",
                  "name": "_buyAmount",
                  "nameLocation": "1206:10:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41671,
                  "src": "1198:18:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41661,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1198:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1104:118:60"
            },
            "returnParameters": {
              "id": 41670,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41665,
                  "mutability": "mutable",
                  "name": "offerId_",
                  "nameLocation": "1278:8:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41671,
                  "src": "1270:16:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41664,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1270:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41667,
                  "mutability": "mutable",
                  "name": "buyTokenCommissionsPaid_",
                  "nameLocation": "1308:24:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41671,
                  "src": "1300:32:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41666,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1300:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41669,
                  "mutability": "mutable",
                  "name": "sellTokenCommissionsPaid_",
                  "nameLocation": "1354:25:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41671,
                  "src": "1346:33:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41668,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1346:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1256:133:60"
            },
            "scope": 41727,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41677,
            "nodeType": "FunctionDefinition",
            "src": "2892:48:60",
            "nodes": [],
            "documentation": {
              "id": 41672,
              "nodeType": "StructuredDocumentation",
              "src": "1396:1491:60",
              "text": " @notice Cancel offer #`_offerId`. This will cancel the offer so that it's no longer active.\n @dev This function can be frontrun: In the scenario where a user wants to cancel an unfavorable market offer, an attacker can potentially monitor and identify\n       that the user has called this method, determine that filling this market offer is profitable, and as a result call executeLimitOffer with a higher gas price to have\n       their transaction filled before the user can have cancelOffer filled. The most ideal situation for the user is to not have placed the unfavorable market offer\n       in the first place since an attacker can always monitor our marketplace and potentially identify profitable market offers. Our UI will aide users in not placing\n       market offers that are obviously unfavorable to the user and/or seem like mistake orders. In the event that a user needs to cancel an offer, it is recommended to\n       use Flashbots in order to privately send your transaction so an attack cannot be triggered from monitoring the mempool for calls to cancelOffer. A user is recommended\n       to change their RPC endpoint to point to https://rpc.flashbots.net when calling cancelOffer. We will add additional documentation to aide our users in this process.\n       More information on using Flashbots: https://docs.flashbots.net/flashbots-protect/rpc/quick-start/\n @param _offerId offer ID"
            },
            "functionSelector": "ef706adf",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelOffer",
            "nameLocation": "2901:11:60",
            "parameters": {
              "id": 41675,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41674,
                  "mutability": "mutable",
                  "name": "_offerId",
                  "nameLocation": "2921:8:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41677,
                  "src": "2913:16:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41673,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2913:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2912:18:60"
            },
            "returnParameters": {
              "id": 41676,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2939:0:60"
            },
            "scope": 41727,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41687,
            "nodeType": "FunctionDefinition",
            "src": "3205:95:60",
            "nodes": [],
            "documentation": {
              "id": 41678,
              "nodeType": "StructuredDocumentation",
              "src": "2946:254:60",
              "text": " @notice Get current best offer for given token pair.\n @dev This means finding the highest sellToken-per-buyToken price, i.e. price = sellToken / buyToken\n @return offerId, or 0 if no current best is available."
            },
            "functionSelector": "4c8198dc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getBestOfferId",
            "nameLocation": "3214:14:60",
            "parameters": {
              "id": 41683,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41680,
                  "mutability": "mutable",
                  "name": "_sellToken",
                  "nameLocation": "3237:10:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41687,
                  "src": "3229:18:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 41679,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3229:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41682,
                  "mutability": "mutable",
                  "name": "_buyToken",
                  "nameLocation": "3257:9:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41687,
                  "src": "3249:17:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 41681,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3249:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3228:39:60"
            },
            "returnParameters": {
              "id": 41686,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41685,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 41687,
                  "src": "3291:7:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41684,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3291:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3290:9:60"
            },
            "scope": 41727,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41693,
            "nodeType": "FunctionDefinition",
            "src": "3390:58:60",
            "nodes": [],
            "documentation": {
              "id": 41688,
              "nodeType": "StructuredDocumentation",
              "src": "3306:79:60",
              "text": " @dev Get last created offer.\n @return offer id."
            },
            "functionSelector": "59e148fc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getLastOfferId",
            "nameLocation": "3399:14:60",
            "parameters": {
              "id": 41689,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3413:2:60"
            },
            "returnParameters": {
              "id": 41692,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41691,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 41693,
                  "src": "3439:7:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41690,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3439:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3438:9:60"
            },
            "scope": 41727,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41702,
            "nodeType": "FunctionDefinition",
            "src": "3619:90:60",
            "nodes": [],
            "documentation": {
              "id": 41694,
              "nodeType": "StructuredDocumentation",
              "src": "3454:160:60",
              "text": " @dev Get the details of the offer #`_offerId`\n @param _offerId ID of a particular offer\n @return _offerState details of the offer"
            },
            "functionSelector": "4579268a",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getOffer",
            "nameLocation": "3628:8:60",
            "parameters": {
              "id": 41697,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41696,
                  "mutability": "mutable",
                  "name": "_offerId",
                  "nameLocation": "3645:8:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41702,
                  "src": "3637:16:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41695,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3637:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3636:18:60"
            },
            "returnParameters": {
              "id": 41701,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41700,
                  "mutability": "mutable",
                  "name": "_offerState",
                  "nameLocation": "3696:11:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41702,
                  "src": "3678:29:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_MarketInfo_$41197_memory_ptr",
                    "typeString": "struct MarketInfo"
                  },
                  "typeName": {
                    "id": 41699,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 41698,
                      "name": "MarketInfo",
                      "nameLocations": [
                        "3678:10:60"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 41197,
                      "src": "3678:10:60"
                    },
                    "referencedDeclaration": 41197,
                    "src": "3678:10:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_MarketInfo_$41197_storage_ptr",
                      "typeString": "struct MarketInfo"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3677:31:60"
            },
            "scope": 41727,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41710,
            "nodeType": "FunctionDefinition",
            "src": "3869:70:60",
            "nodes": [],
            "documentation": {
              "id": 41703,
              "nodeType": "StructuredDocumentation",
              "src": "3715:149:60",
              "text": " @dev Check if the offer #`_offerId` is active or not.\n @param _offerId ID of a particular offer\n @return active or not"
            },
            "functionSelector": "8d81a1d3",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isActiveOffer",
            "nameLocation": "3878:13:60",
            "parameters": {
              "id": 41706,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41705,
                  "mutability": "mutable",
                  "name": "_offerId",
                  "nameLocation": "3900:8:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41710,
                  "src": "3892:16:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41704,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3892:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3891:18:60"
            },
            "returnParameters": {
              "id": 41709,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41708,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 41710,
                  "src": "3933:4:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 41707,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3933:4:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3932:6:60"
            },
            "scope": 41727,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41719,
            "nodeType": "FunctionDefinition",
            "src": "4222:109:60",
            "nodes": [],
            "documentation": {
              "id": 41711,
              "nodeType": "StructuredDocumentation",
              "src": "3945:272:60",
              "text": " @dev Calculate the trading commissions based on a buy amount.\n @param buyAmount The amount that the commissions payments are calculated from.\n @return tc TradingCommissions struct with metadata regarding the trade commission payment amounts."
            },
            "functionSelector": "eb3f5926",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "calculateTradingCommissions",
            "nameLocation": "4231:27:60",
            "parameters": {
              "id": 41714,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41713,
                  "mutability": "mutable",
                  "name": "buyAmount",
                  "nameLocation": "4267:9:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41719,
                  "src": "4259:17:60",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41712,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4259:7:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4258:19:60"
            },
            "returnParameters": {
              "id": 41718,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41717,
                  "mutability": "mutable",
                  "name": "tc",
                  "nameLocation": "4327:2:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41719,
                  "src": "4301:28:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TradingCommissions_$41311_memory_ptr",
                    "typeString": "struct TradingCommissions"
                  },
                  "typeName": {
                    "id": 41716,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 41715,
                      "name": "TradingCommissions",
                      "nameLocations": [
                        "4301:18:60"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 41311,
                      "src": "4301:18:60"
                    },
                    "referencedDeclaration": 41311,
                    "src": "4301:18:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TradingCommissions_$41311_storage_ptr",
                      "typeString": "struct TradingCommissions"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4300:30:60"
            },
            "scope": 41727,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41726,
            "nodeType": "FunctionDefinition",
            "src": "4566:108:60",
            "nodes": [],
            "documentation": {
              "id": 41720,
              "nodeType": "StructuredDocumentation",
              "src": "4337:224:60",
              "text": " @notice Get the marketplace's trading commissions basis points.\n @return bp - TradingCommissionsBasisPoints struct containing the individual basis points set for each marketplace commission receiver."
            },
            "functionSelector": "ed7364ae",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getTradingCommissionsBasisPoints",
            "nameLocation": "4575:32:60",
            "parameters": {
              "id": 41721,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4607:2:60"
            },
            "returnParameters": {
              "id": 41725,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41724,
                  "mutability": "mutable",
                  "name": "bp",
                  "nameLocation": "4670:2:60",
                  "nodeType": "VariableDeclaration",
                  "scope": 41726,
                  "src": "4633:39:60",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_TradingCommissionsBasisPoints_$41322_memory_ptr",
                    "typeString": "struct TradingCommissionsBasisPoints"
                  },
                  "typeName": {
                    "id": 41723,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 41722,
                      "name": "TradingCommissionsBasisPoints",
                      "nameLocations": [
                        "4633:29:60"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 41322,
                      "src": "4633:29:60"
                    },
                    "referencedDeclaration": 41322,
                    "src": "4633:29:60",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_TradingCommissionsBasisPoints_$41322_storage_ptr",
                      "typeString": "struct TradingCommissionsBasisPoints"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4632:41:60"
            },
            "scope": 41727,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IMarketFacet",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 41653,
          "nodeType": "StructuredDocumentation",
          "src": "157:244:60",
          "text": " @title Matching Market (inspired by MakerOTC: https://github.com/nayms/maker-otc/blob/master/contracts/matching_market.sol)\n @notice Trade entity tokens\n @dev This should only be called through an entity, never directly by an EOA"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          41727
        ],
        "name": "IMarketFacet",
        "nameLocation": "412:12:60",
        "scope": 41728,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 60
}