{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "cancelUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "createUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getUpgrade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUpgradeExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "upgradeExpiration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDiamondInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "updateUpgradeExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "cancelUpgrade(bytes32)": "337781ea",
    "createUpgrade(bytes32)": "1d510217",
    "getUpgrade(bytes32)": "22f153db",
    "getUpgradeExpiration()": "e13b9b14",
    "isDiamondInitialized()": "10a2bbed",
    "updateUpgradeExpiration(uint256)": "371d6244"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"cancelUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"createUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getUpgrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpgradeExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upgradeExpiration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDiamondInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"updateUpgradeExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelUpgrade(bytes32)\":{\"details\":\"This will set the mapping AppStorage.upgradeScheduled back to 0.\",\"params\":{\"id\":\"This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[].\"}},\"createUpgrade(bytes32)\":{\"details\":\"The diamondCut() has been modified to check if the upgrade has been scheduled. This method needs to be called in order      for an upgrade to be executed.\",\"params\":{\"id\":\"This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[].\"}},\"getUpgrade(bytes32)\":{\"details\":\"This will get the value from AppStorage.upgradeScheduled  mapping.\",\"params\":{\"id\":\"This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[].\"}},\"getUpgradeExpiration()\":{\"details\":\"This will get the value from AppStorage.upgradeExpiration. AppStorage.upgradeExpiration is added to the block.timestamp to create the upgrade expiration date.\"},\"isDiamondInitialized()\":{\"details\":\"This will get the value from AppStorage.diamondInitialized.\"},\"updateUpgradeExpiration(uint256)\":{\"details\":\"When createUpgrade() is called, it allows a diamondCut() upgrade to be executed. This upgrade must be executed before the      upgrade expires. The upgrade expires based on when the upgrade was scheduled (when createUpgrade() was called) + AppStorage.upgradeExpiration.\",\"params\":{\"duration\":\"The duration until the upgrade expires.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelUpgrade(bytes32)\":{\"notice\":\"Cancel the following upgrade hash: `id`\"},\"createUpgrade(bytes32)\":{\"notice\":\"Approve the following upgrade hash: `id`\"},\"getUpgrade(bytes32)\":{\"notice\":\"Get the expiry date for provided upgrade hash.\"},\"getUpgradeExpiration()\":{\"notice\":\"Get the upgrade expiration period.\"},\"isDiamondInitialized()\":{\"notice\":\"Check if the diamond has been initialized.\"},\"updateUpgradeExpiration(uint256)\":{\"notice\":\"Update the diamond cut upgrade expiration period.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/diamonds/nayms/interfaces/IGovernanceFacet.sol\":\"IGovernanceFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/ozv4/\",\":@uniswap/lib/=lib/solidity-lib/\",\":@uniswap/v2-core/=lib/v2-core/\",\":@uniswap/v3-core/=lib/v3-core/\",\":@uniswap/v3-periphery/=lib/v3-periphery/\",\":base64-sol/=lib/base64/\",\":ds-test/=lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin/=lib/ozv4/contracts/\",\":ozv4/=lib/ozv4/\",\":script/=script/\",\":solidity-lib/=lib/solidity-lib/contracts/\",\":solidity-stringutils/=lib/solidity-stringutils/src/\",\":solmate/=lib/solmate/src/\",\":src/=src/\",\":test/=test/\",\":v3-core-08/=lib/v3-core-08/contracts/\",\":v3-peri-08/=lib/v3-peri-08/contracts/\"]},\"sources\":{\"src/diamonds/nayms/interfaces/IGovernanceFacet.sol\":{\"keccak256\":\"0x521a78755df804dc302abec66a068c8529c7976893f7b5e9de6d8b5f463044bf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c7d94ca1e30c4302f6125b97306a29ee6bf1a141acb8447fbdd18630f342c666\",\"dweb:/ipfs/QmZZRkAVWLhXMbc31m5e3MZJVZ7JUKiXAnNDBm5Ap7isaN\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.17+commit.8df45f5f"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "cancelUpgrade"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createUpgrade"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getUpgrade",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getUpgradeExpiration",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "upgradeExpiration",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "isDiamondInitialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateUpgradeExpiration"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "cancelUpgrade(bytes32)": {
            "details": "This will set the mapping AppStorage.upgradeScheduled back to 0.",
            "params": {
              "id": "This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[]."
            }
          },
          "createUpgrade(bytes32)": {
            "details": "The diamondCut() has been modified to check if the upgrade has been scheduled. This method needs to be called in order      for an upgrade to be executed.",
            "params": {
              "id": "This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[]."
            }
          },
          "getUpgrade(bytes32)": {
            "details": "This will get the value from AppStorage.upgradeScheduled  mapping.",
            "params": {
              "id": "This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[]."
            }
          },
          "getUpgradeExpiration()": {
            "details": "This will get the value from AppStorage.upgradeExpiration. AppStorage.upgradeExpiration is added to the block.timestamp to create the upgrade expiration date."
          },
          "isDiamondInitialized()": {
            "details": "This will get the value from AppStorage.diamondInitialized."
          },
          "updateUpgradeExpiration(uint256)": {
            "details": "When createUpgrade() is called, it allows a diamondCut() upgrade to be executed. This upgrade must be executed before the      upgrade expires. The upgrade expires based on when the upgrade was scheduled (when createUpgrade() was called) + AppStorage.upgradeExpiration.",
            "params": {
              "duration": "The duration until the upgrade expires."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "cancelUpgrade(bytes32)": {
            "notice": "Cancel the following upgrade hash: `id`"
          },
          "createUpgrade(bytes32)": {
            "notice": "Approve the following upgrade hash: `id`"
          },
          "getUpgrade(bytes32)": {
            "notice": "Get the expiry date for provided upgrade hash."
          },
          "getUpgradeExpiration()": {
            "notice": "Get the upgrade expiration period."
          },
          "isDiamondInitialized()": {
            "notice": "Check if the diamond has been initialized."
          },
          "updateUpgradeExpiration(uint256)": {
            "notice": "Update the diamond cut upgrade expiration period."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=lib/ozv4/",
        ":@uniswap/lib/=lib/solidity-lib/",
        ":@uniswap/v2-core/=lib/v2-core/",
        ":@uniswap/v3-core/=lib/v3-core/",
        ":@uniswap/v3-periphery/=lib/v3-periphery/",
        ":base64-sol/=lib/base64/",
        ":ds-test/=lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin/=lib/ozv4/contracts/",
        ":ozv4/=lib/ozv4/",
        ":script/=script/",
        ":solidity-lib/=lib/solidity-lib/contracts/",
        ":solidity-stringutils/=lib/solidity-stringutils/src/",
        ":solmate/=lib/solmate/src/",
        ":src/=src/",
        ":test/=test/",
        ":v3-core-08/=lib/v3-core-08/contracts/",
        ":v3-peri-08/=lib/v3-peri-08/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/diamonds/nayms/interfaces/IGovernanceFacet.sol": "IGovernanceFacet"
      },
      "libraries": {}
    },
    "sources": {
      "src/diamonds/nayms/interfaces/IGovernanceFacet.sol": {
        "keccak256": "0x521a78755df804dc302abec66a068c8529c7976893f7b5e9de6d8b5f463044bf",
        "urls": [
          "bzz-raw://c7d94ca1e30c4302f6125b97306a29ee6bf1a141acb8447fbdd18630f342c666",
          "dweb:/ipfs/QmZZRkAVWLhXMbc31m5e3MZJVZ7JUKiXAnNDBm5Ap7isaN"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/diamonds/nayms/interfaces/IGovernanceFacet.sol",
    "id": 41493,
    "exportedSymbols": {
      "IGovernanceFacet": [
        41492
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2192:58",
    "nodes": [
      {
        "id": 41453,
        "nodeType": "PragmaDirective",
        "src": "32:23:58",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".17"
        ]
      },
      {
        "id": 41492,
        "nodeType": "ContractDefinition",
        "src": "57:2166:58",
        "nodes": [
          {
            "id": 41459,
            "nodeType": "FunctionDefinition",
            "src": "236:61:58",
            "nodes": [],
            "documentation": {
              "id": 41454,
              "nodeType": "StructuredDocumentation",
              "src": "90:141:58",
              "text": " @notice Check if the diamond has been initialized.\n @dev This will get the value from AppStorage.diamondInitialized."
            },
            "functionSelector": "10a2bbed",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isDiamondInitialized",
            "nameLocation": "245:20:58",
            "parameters": {
              "id": 41455,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "265:2:58"
            },
            "returnParameters": {
              "id": 41458,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41457,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 41459,
                  "src": "291:4:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 41456,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "291:4:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "290:6:58"
            },
            "scope": 41492,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41465,
            "nodeType": "FunctionDefinition",
            "src": "673:44:58",
            "nodes": [],
            "documentation": {
              "id": 41460,
              "nodeType": "StructuredDocumentation",
              "src": "303:365:58",
              "text": " @notice Approve the following upgrade hash: `id`\n @dev The diamondCut() has been modified to check if the upgrade has been scheduled. This method needs to be called in order\n      for an upgrade to be executed.\n @param id This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[]."
            },
            "functionSelector": "1d510217",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createUpgrade",
            "nameLocation": "682:13:58",
            "parameters": {
              "id": 41463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41462,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "704:2:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 41465,
                  "src": "696:10:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 41461,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "696:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "695:12:58"
            },
            "returnParameters": {
              "id": 41464,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "716:0:58"
            },
            "scope": 41492,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41471,
            "nodeType": "FunctionDefinition",
            "src": "1156:60:58",
            "nodes": [],
            "documentation": {
              "id": 41466,
              "nodeType": "StructuredDocumentation",
              "src": "723:428:58",
              "text": " @notice Update the diamond cut upgrade expiration period.\n @dev When createUpgrade() is called, it allows a diamondCut() upgrade to be executed. This upgrade must be executed before the\n      upgrade expires. The upgrade expires based on when the upgrade was scheduled (when createUpgrade() was called) + AppStorage.upgradeExpiration.\n @param duration The duration until the upgrade expires."
            },
            "functionSelector": "371d6244",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateUpgradeExpiration",
            "nameLocation": "1165:23:58",
            "parameters": {
              "id": 41469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41468,
                  "mutability": "mutable",
                  "name": "duration",
                  "nameLocation": "1197:8:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 41471,
                  "src": "1189:16:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41467,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1189:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1188:18:58"
            },
            "returnParameters": {
              "id": 41470,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1215:0:58"
            },
            "scope": 41492,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41477,
            "nodeType": "FunctionDefinition",
            "src": "1494:44:58",
            "nodes": [],
            "documentation": {
              "id": 41472,
              "nodeType": "StructuredDocumentation",
              "src": "1222:267:58",
              "text": " @notice Cancel the following upgrade hash: `id`\n @dev This will set the mapping AppStorage.upgradeScheduled back to 0.\n @param id This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[]."
            },
            "functionSelector": "337781ea",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "cancelUpgrade",
            "nameLocation": "1503:13:58",
            "parameters": {
              "id": 41475,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41474,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "1525:2:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 41477,
                  "src": "1517:10:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 41473,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1517:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1516:12:58"
            },
            "returnParameters": {
              "id": 41476,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1537:0:58"
            },
            "scope": 41492,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41485,
            "nodeType": "FunctionDefinition",
            "src": "1825:71:58",
            "nodes": [],
            "documentation": {
              "id": 41478,
              "nodeType": "StructuredDocumentation",
              "src": "1544:276:58",
              "text": " @notice Get the expiry date for provided upgrade hash.\n @dev This will get the value from AppStorage.upgradeScheduled  mapping.\n @param id This is the keccak256(abi.encode(cut)), where cut is the array of FacetCut struct, IDiamondCut.FacetCut[]."
            },
            "functionSelector": "22f153db",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUpgrade",
            "nameLocation": "1834:10:58",
            "parameters": {
              "id": 41481,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41480,
                  "mutability": "mutable",
                  "name": "id",
                  "nameLocation": "1853:2:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 41485,
                  "src": "1845:10:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 41479,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1845:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1844:12:58"
            },
            "returnParameters": {
              "id": 41484,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41483,
                  "mutability": "mutable",
                  "name": "expiry",
                  "nameLocation": "1888:6:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 41485,
                  "src": "1880:14:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41482,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1880:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1879:16:58"
            },
            "scope": 41492,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 41491,
            "nodeType": "FunctionDefinition",
            "src": "2139:82:58",
            "nodes": [],
            "documentation": {
              "id": 41486,
              "nodeType": "StructuredDocumentation",
              "src": "1902:232:58",
              "text": " @notice Get the upgrade expiration period.\n @dev This will get the value from AppStorage.upgradeExpiration. AppStorage.upgradeExpiration is added to the block.timestamp to create the upgrade expiration date."
            },
            "functionSelector": "e13b9b14",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getUpgradeExpiration",
            "nameLocation": "2148:20:58",
            "parameters": {
              "id": 41487,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2168:2:58"
            },
            "returnParameters": {
              "id": 41490,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41489,
                  "mutability": "mutable",
                  "name": "upgradeExpiration",
                  "nameLocation": "2202:17:58",
                  "nodeType": "VariableDeclaration",
                  "scope": 41491,
                  "src": "2194:25:58",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41488,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2194:7:58",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2193:27:58"
            },
            "scope": 41492,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IGovernanceFacet",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          41492
        ],
        "name": "IGovernanceFacet",
        "nameLocation": "67:16:58",
        "scope": 41493,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 58
}